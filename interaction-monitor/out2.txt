#define EXT4_ALLOC_INODE_PROBE 0
#define EXT4_BMAP_PROBE 1
#define EXT4_DA_INVALIDATEPAGE_PROBE 2
#define EXT4_DA_WRITE_BEGIN_PROBE 3
#define EXT4_DA_WRITE_END_PROBE 4
#define EXT4_DAX_WRITEPAGES_PROBE 5
#define EXT4_DESTROY_INODE_PROBE 6
#define EXT4_DIR_LLSEEK_PROBE 7
#define EXT4_DIR_OPEN_PROBE 8
#define EXT4_DIRECT_IO_PROBE 9
#define EXT4_DIRTY_INODE_PROBE 10
#define EXT4_DROP_INODE_PROBE 11
#define EXT4_EVICT_INODE_PROBE 12
#define EXT4_FALLOCATE_PROBE 13
#define EXT4_FH_TO_DENTRY_PROBE 14
#define EXT4_FH_TO_PARENT_PROBE 15
#define EXT4_FIEMAP_PROBE 16
#define EXT4_FILE_GETATTR_PROBE 17
#define EXT4_FILE_MMAP_PROBE 18
#define EXT4_FILE_OPEN_PROBE 19
#define EXT4_FILE_READ_ITER_PROBE 20
#define EXT4_FILE_WRITE_ITER_PROBE 21
#define EXT4_FILEMAP_FAULT_PROBE 22
#define EXT4_FREEZE_PROBE 23
#define EXT4_GET_ACL_PROBE 24
#define EXT4_GET_PARENT_PROBE 25
#define EXT4_INVALIDATEPAGE_PROBE 26
#define EXT4_IOCTL_PROBE 27
#define EXT4_IOMAP_BEGIN_PROBE 28
#define EXT4_IOMAP_END_PROBE 29
#define EXT4_LISTXATTR_PROBE 30
#define EXT4_LLSEEK_PROBE 31
#define EXT4_MB_SEQ_GROUPS_NEXT_PROBE 32
#define EXT4_MB_SEQ_GROUPS_SHOW_PROBE 33
#define EXT4_MB_SEQ_GROUPS_START_PROBE 34
#define EXT4_MB_SEQ_GROUPS_STOP_PROBE 35
#define EXT4_MOUNT_PROBE 36
#define EXT4_NFS_COMMIT_METADATA_PROBE 37
#define EXT4_PAGE_MKWRITE_PROBE 38
#define EXT4_PUT_SUPER_PROBE 39
#define EXT4_READDIR_PROBE 40
#define EXT4_READPAGE_PROBE 41
#define EXT4_READPAGES_PROBE 42
#define EXT4_RELEASE_DIR_PROBE 43
#define EXT4_RELEASE_FILE_PROBE 44
#define EXT4_RELEASEPAGE_PROBE 45
#define EXT4_REMOUNT_PROBE 46
#define EXT4_SET_ACL_PROBE 47
#define EXT4_SET_PAGE_DIRTY_PROBE 48
#define EXT4_SETATTR_PROBE 49
#define EXT4_SHOW_OPTIONS_PROBE 50
#define EXT4_STATFS_PROBE 51
#define EXT4_SYNC_FILE_PROBE 52
#define EXT4_SYNC_FS_PROBE 53
#define EXT4_UNFREEZE_PROBE 54
#define EXT4_WRITE_BEGIN_PROBE 55
#define EXT4_WRITE_END_PROBE 56
#define EXT4_WRITE_INODE_PROBE 57
#define EXT4_WRITEPAGE_PROBE 58
#define EXT4_WRITEPAGE_PROBE 59


int ext4_alloc_inode_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_alloc_inode_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_bmap_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_bmap_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_da_invalidatepage_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_da_invalidatepage_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_da_write_begin_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_da_write_begin_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_da_write_end_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_da_write_end_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_dax_writepages_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_dax_writepages_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_destroy_inode_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_destroy_inode_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_dir_llseek_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_dir_llseek_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_dir_open_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_dir_open_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_direct_IO_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_direct_IO_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_dirty_inode_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_dirty_inode_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_drop_inode_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_drop_inode_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_evict_inode_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_evict_inode_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_fallocate_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_fallocate_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_fh_to_dentry_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_fh_to_dentry_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_fh_to_parent_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_fh_to_parent_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_fiemap_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_fiemap_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_file_getattr_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_file_getattr_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_file_mmap_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_file_mmap_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_file_open_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_file_open_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_file_read_iter_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_file_read_iter_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_file_write_iter_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_file_write_iter_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_filemap_fault_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_filemap_fault_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_freeze_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_freeze_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_get_acl_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_get_acl_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_get_parent_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_get_parent_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_invalidatepage_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_invalidatepage_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_ioctl_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_ioctl_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_iomap_begin_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_iomap_begin_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_iomap_end_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_iomap_end_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_listxattr_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_listxattr_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_llseek_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_llseek_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_mb_seq_groups_next_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_mb_seq_groups_next_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_mb_seq_groups_show_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_mb_seq_groups_show_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_mb_seq_groups_start_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_mb_seq_groups_start_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_mb_seq_groups_stop_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_mb_seq_groups_stop_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_mount_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_mount_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_nfs_commit_metadata_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_nfs_commit_metadata_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_page_mkwrite_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_page_mkwrite_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_put_super_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_put_super_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_readdir_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_readdir_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_readpage_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_readpage_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_readpages_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_readpages_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_release_dir_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_release_dir_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_release_file_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_release_file_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_releasepage_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_releasepage_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_remount_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_remount_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_set_acl_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_set_acl_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_set_page_dirty_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_set_page_dirty_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_setattr_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_setattr_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_show_options_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_show_options_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_statfs_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_statfs_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_sync_file_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_sync_file_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_sync_fs_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_sync_fs_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_unfreeze_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_unfreeze_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_write_begin_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_write_begin_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_write_end_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_write_end_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_write_inode_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_write_inode_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_writepage_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_writepage_post_handler(struct kprobe *p, struct pt_regs *regs);

int ext4_writepage_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ext4_writepage_post_handler(struct kprobe *p, struct pt_regs *regs);


static struct kprobe ext4_alloc_inode_kp = {
    .symbol_name = "ext4_alloc_inode",
    .pre_handler = ext4_alloc_inode_pre_handler,
    .post_handler = ext4_alloc_inode_post_handler,
};

static struct kprobe ext4_bmap_kp = {
    .symbol_name = "ext4_bmap",
    .pre_handler = ext4_bmap_pre_handler,
    .post_handler = ext4_bmap_post_handler,
};

static struct kprobe ext4_da_invalidatepage_kp = {
    .symbol_name = "ext4_da_invalidatepage",
    .pre_handler = ext4_da_invalidatepage_pre_handler,
    .post_handler = ext4_da_invalidatepage_post_handler,
};

static struct kprobe ext4_da_write_begin_kp = {
    .symbol_name = "ext4_da_write_begin",
    .pre_handler = ext4_da_write_begin_pre_handler,
    .post_handler = ext4_da_write_begin_post_handler,
};

static struct kprobe ext4_da_write_end_kp = {
    .symbol_name = "ext4_da_write_end",
    .pre_handler = ext4_da_write_end_pre_handler,
    .post_handler = ext4_da_write_end_post_handler,
};

static struct kprobe ext4_dax_writepages_kp = {
    .symbol_name = "ext4_dax_writepages",
    .pre_handler = ext4_dax_writepages_pre_handler,
    .post_handler = ext4_dax_writepages_post_handler,
};

static struct kprobe ext4_destroy_inode_kp = {
    .symbol_name = "ext4_destroy_inode",
    .pre_handler = ext4_destroy_inode_pre_handler,
    .post_handler = ext4_destroy_inode_post_handler,
};

static struct kprobe ext4_dir_llseek_kp = {
    .symbol_name = "ext4_dir_llseek",
    .pre_handler = ext4_dir_llseek_pre_handler,
    .post_handler = ext4_dir_llseek_post_handler,
};

static struct kprobe ext4_dir_open_kp = {
    .symbol_name = "ext4_dir_open",
    .pre_handler = ext4_dir_open_pre_handler,
    .post_handler = ext4_dir_open_post_handler,
};

static struct kprobe ext4_direct_IO_kp = {
    .symbol_name = "ext4_direct_IO",
    .pre_handler = ext4_direct_IO_pre_handler,
    .post_handler = ext4_direct_IO_post_handler,
};

static struct kprobe ext4_dirty_inode_kp = {
    .symbol_name = "ext4_dirty_inode",
    .pre_handler = ext4_dirty_inode_pre_handler,
    .post_handler = ext4_dirty_inode_post_handler,
};

static struct kprobe ext4_drop_inode_kp = {
    .symbol_name = "ext4_drop_inode",
    .pre_handler = ext4_drop_inode_pre_handler,
    .post_handler = ext4_drop_inode_post_handler,
};

static struct kprobe ext4_evict_inode_kp = {
    .symbol_name = "ext4_evict_inode",
    .pre_handler = ext4_evict_inode_pre_handler,
    .post_handler = ext4_evict_inode_post_handler,
};

static struct kprobe ext4_fallocate_kp = {
    .symbol_name = "ext4_fallocate",
    .pre_handler = ext4_fallocate_pre_handler,
    .post_handler = ext4_fallocate_post_handler,
};

static struct kprobe ext4_fh_to_dentry_kp = {
    .symbol_name = "ext4_fh_to_dentry",
    .pre_handler = ext4_fh_to_dentry_pre_handler,
    .post_handler = ext4_fh_to_dentry_post_handler,
};

static struct kprobe ext4_fh_to_parent_kp = {
    .symbol_name = "ext4_fh_to_parent",
    .pre_handler = ext4_fh_to_parent_pre_handler,
    .post_handler = ext4_fh_to_parent_post_handler,
};

static struct kprobe ext4_fiemap_kp = {
    .symbol_name = "ext4_fiemap",
    .pre_handler = ext4_fiemap_pre_handler,
    .post_handler = ext4_fiemap_post_handler,
};

static struct kprobe ext4_file_getattr_kp = {
    .symbol_name = "ext4_file_getattr",
    .pre_handler = ext4_file_getattr_pre_handler,
    .post_handler = ext4_file_getattr_post_handler,
};

static struct kprobe ext4_file_mmap_kp = {
    .symbol_name = "ext4_file_mmap",
    .pre_handler = ext4_file_mmap_pre_handler,
    .post_handler = ext4_file_mmap_post_handler,
};

static struct kprobe ext4_file_open_kp = {
    .symbol_name = "ext4_file_open",
    .pre_handler = ext4_file_open_pre_handler,
    .post_handler = ext4_file_open_post_handler,
};

static struct kprobe ext4_file_read_iter_kp = {
    .symbol_name = "ext4_file_read_iter",
    .pre_handler = ext4_file_read_iter_pre_handler,
    .post_handler = ext4_file_read_iter_post_handler,
};

static struct kprobe ext4_file_write_iter_kp = {
    .symbol_name = "ext4_file_write_iter",
    .pre_handler = ext4_file_write_iter_pre_handler,
    .post_handler = ext4_file_write_iter_post_handler,
};

static struct kprobe ext4_filemap_fault_kp = {
    .symbol_name = "ext4_filemap_fault",
    .pre_handler = ext4_filemap_fault_pre_handler,
    .post_handler = ext4_filemap_fault_post_handler,
};

static struct kprobe ext4_freeze_kp = {
    .symbol_name = "ext4_freeze",
    .pre_handler = ext4_freeze_pre_handler,
    .post_handler = ext4_freeze_post_handler,
};

static struct kprobe ext4_get_acl_kp = {
    .symbol_name = "ext4_get_acl",
    .pre_handler = ext4_get_acl_pre_handler,
    .post_handler = ext4_get_acl_post_handler,
};

static struct kprobe ext4_get_parent_kp = {
    .symbol_name = "ext4_get_parent",
    .pre_handler = ext4_get_parent_pre_handler,
    .post_handler = ext4_get_parent_post_handler,
};

static struct kprobe ext4_invalidatepage_kp = {
    .symbol_name = "ext4_invalidatepage",
    .pre_handler = ext4_invalidatepage_pre_handler,
    .post_handler = ext4_invalidatepage_post_handler,
};

static struct kprobe ext4_ioctl_kp = {
    .symbol_name = "ext4_ioctl",
    .pre_handler = ext4_ioctl_pre_handler,
    .post_handler = ext4_ioctl_post_handler,
};

static struct kprobe ext4_iomap_begin_kp = {
    .symbol_name = "ext4_iomap_begin",
    .pre_handler = ext4_iomap_begin_pre_handler,
    .post_handler = ext4_iomap_begin_post_handler,
};

static struct kprobe ext4_iomap_end_kp = {
    .symbol_name = "ext4_iomap_end",
    .pre_handler = ext4_iomap_end_pre_handler,
    .post_handler = ext4_iomap_end_post_handler,
};

static struct kprobe ext4_listxattr_kp = {
    .symbol_name = "ext4_listxattr",
    .pre_handler = ext4_listxattr_pre_handler,
    .post_handler = ext4_listxattr_post_handler,
};

static struct kprobe ext4_llseek_kp = {
    .symbol_name = "ext4_llseek",
    .pre_handler = ext4_llseek_pre_handler,
    .post_handler = ext4_llseek_post_handler,
};

static struct kprobe ext4_mb_seq_groups_next_kp = {
    .symbol_name = "ext4_mb_seq_groups_next",
    .pre_handler = ext4_mb_seq_groups_next_pre_handler,
    .post_handler = ext4_mb_seq_groups_next_post_handler,
};

static struct kprobe ext4_mb_seq_groups_show_kp = {
    .symbol_name = "ext4_mb_seq_groups_show",
    .pre_handler = ext4_mb_seq_groups_show_pre_handler,
    .post_handler = ext4_mb_seq_groups_show_post_handler,
};

static struct kprobe ext4_mb_seq_groups_start_kp = {
    .symbol_name = "ext4_mb_seq_groups_start",
    .pre_handler = ext4_mb_seq_groups_start_pre_handler,
    .post_handler = ext4_mb_seq_groups_start_post_handler,
};

static struct kprobe ext4_mb_seq_groups_stop_kp = {
    .symbol_name = "ext4_mb_seq_groups_stop",
    .pre_handler = ext4_mb_seq_groups_stop_pre_handler,
    .post_handler = ext4_mb_seq_groups_stop_post_handler,
};

static struct kprobe ext4_mount_kp = {
    .symbol_name = "ext4_mount",
    .pre_handler = ext4_mount_pre_handler,
    .post_handler = ext4_mount_post_handler,
};

static struct kprobe ext4_nfs_commit_metadata_kp = {
    .symbol_name = "ext4_nfs_commit_metadata",
    .pre_handler = ext4_nfs_commit_metadata_pre_handler,
    .post_handler = ext4_nfs_commit_metadata_post_handler,
};

static struct kprobe ext4_page_mkwrite_kp = {
    .symbol_name = "ext4_page_mkwrite",
    .pre_handler = ext4_page_mkwrite_pre_handler,
    .post_handler = ext4_page_mkwrite_post_handler,
};

static struct kprobe ext4_put_super_kp = {
    .symbol_name = "ext4_put_super",
    .pre_handler = ext4_put_super_pre_handler,
    .post_handler = ext4_put_super_post_handler,
};

static struct kprobe ext4_readdir_kp = {
    .symbol_name = "ext4_readdir",
    .pre_handler = ext4_readdir_pre_handler,
    .post_handler = ext4_readdir_post_handler,
};

static struct kprobe ext4_readpage_kp = {
    .symbol_name = "ext4_readpage",
    .pre_handler = ext4_readpage_pre_handler,
    .post_handler = ext4_readpage_post_handler,
};

static struct kprobe ext4_readpages_kp = {
    .symbol_name = "ext4_readpages",
    .pre_handler = ext4_readpages_pre_handler,
    .post_handler = ext4_readpages_post_handler,
};

static struct kprobe ext4_release_dir_kp = {
    .symbol_name = "ext4_release_dir",
    .pre_handler = ext4_release_dir_pre_handler,
    .post_handler = ext4_release_dir_post_handler,
};

static struct kprobe ext4_release_file_kp = {
    .symbol_name = "ext4_release_file",
    .pre_handler = ext4_release_file_pre_handler,
    .post_handler = ext4_release_file_post_handler,
};

static struct kprobe ext4_releasepage_kp = {
    .symbol_name = "ext4_releasepage",
    .pre_handler = ext4_releasepage_pre_handler,
    .post_handler = ext4_releasepage_post_handler,
};

static struct kprobe ext4_remount_kp = {
    .symbol_name = "ext4_remount",
    .pre_handler = ext4_remount_pre_handler,
    .post_handler = ext4_remount_post_handler,
};

static struct kprobe ext4_set_acl_kp = {
    .symbol_name = "ext4_set_acl",
    .pre_handler = ext4_set_acl_pre_handler,
    .post_handler = ext4_set_acl_post_handler,
};

static struct kprobe ext4_set_page_dirty_kp = {
    .symbol_name = "ext4_set_page_dirty",
    .pre_handler = ext4_set_page_dirty_pre_handler,
    .post_handler = ext4_set_page_dirty_post_handler,
};

static struct kprobe ext4_setattr_kp = {
    .symbol_name = "ext4_setattr",
    .pre_handler = ext4_setattr_pre_handler,
    .post_handler = ext4_setattr_post_handler,
};

static struct kprobe ext4_show_options_kp = {
    .symbol_name = "ext4_show_options",
    .pre_handler = ext4_show_options_pre_handler,
    .post_handler = ext4_show_options_post_handler,
};

static struct kprobe ext4_statfs_kp = {
    .symbol_name = "ext4_statfs",
    .pre_handler = ext4_statfs_pre_handler,
    .post_handler = ext4_statfs_post_handler,
};

static struct kprobe ext4_sync_file_kp = {
    .symbol_name = "ext4_sync_file",
    .pre_handler = ext4_sync_file_pre_handler,
    .post_handler = ext4_sync_file_post_handler,
};

static struct kprobe ext4_sync_fs_kp = {
    .symbol_name = "ext4_sync_fs",
    .pre_handler = ext4_sync_fs_pre_handler,
    .post_handler = ext4_sync_fs_post_handler,
};

static struct kprobe ext4_unfreeze_kp = {
    .symbol_name = "ext4_unfreeze",
    .pre_handler = ext4_unfreeze_pre_handler,
    .post_handler = ext4_unfreeze_post_handler,
};

static struct kprobe ext4_write_begin_kp = {
    .symbol_name = "ext4_write_begin",
    .pre_handler = ext4_write_begin_pre_handler,
    .post_handler = ext4_write_begin_post_handler,
};

static struct kprobe ext4_write_end_kp = {
    .symbol_name = "ext4_write_end",
    .pre_handler = ext4_write_end_pre_handler,
    .post_handler = ext4_write_end_post_handler,
};

static struct kprobe ext4_write_inode_kp = {
    .symbol_name = "ext4_write_inode",
    .pre_handler = ext4_write_inode_pre_handler,
    .post_handler = ext4_write_inode_post_handler,
};

static struct kprobe ext4_writepage_kp = {
    .symbol_name = "ext4_writepage",
    .pre_handler = ext4_writepage_pre_handler,
    .post_handler = ext4_writepage_post_handler,
};

static struct kprobe ext4_writepage_kp = {
    .symbol_name = "ext4_writepage",
    .pre_handler = ext4_writepage_pre_handler,
    .post_handler = ext4_writepage_post_handler,
};


static struct kprobe *fp_kps[70] = {
    	[EXT4_ALLOC_INODE_PROBE] = &ext4_alloc_inode_kp,
	[EXT4_BMAP_PROBE] = &ext4_bmap_kp,
	[EXT4_DA_INVALIDATEPAGE_PROBE] = &ext4_da_invalidatepage_kp,
	[EXT4_DA_WRITE_BEGIN_PROBE] = &ext4_da_write_begin_kp,
	[EXT4_DA_WRITE_END_PROBE] = &ext4_da_write_end_kp,
	[EXT4_DAX_WRITEPAGES_PROBE] = &ext4_dax_writepages_kp,
	[EXT4_DESTROY_INODE_PROBE] = &ext4_destroy_inode_kp,
	[EXT4_DIR_LLSEEK_PROBE] = &ext4_dir_llseek_kp,
	[EXT4_DIR_OPEN_PROBE] = &ext4_dir_open_kp,
	[EXT4_DIRECT_IO_PROBE] = &ext4_direct_IO_kp,
	[EXT4_DIRTY_INODE_PROBE] = &ext4_dirty_inode_kp,
	[EXT4_DROP_INODE_PROBE] = &ext4_drop_inode_kp,
	[EXT4_EVICT_INODE_PROBE] = &ext4_evict_inode_kp,
	[EXT4_FALLOCATE_PROBE] = &ext4_fallocate_kp,
	[EXT4_FH_TO_DENTRY_PROBE] = &ext4_fh_to_dentry_kp,
	[EXT4_FH_TO_PARENT_PROBE] = &ext4_fh_to_parent_kp,
	[EXT4_FIEMAP_PROBE] = &ext4_fiemap_kp,
	[EXT4_FILE_GETATTR_PROBE] = &ext4_file_getattr_kp,
	[EXT4_FILE_MMAP_PROBE] = &ext4_file_mmap_kp,
	[EXT4_FILE_OPEN_PROBE] = &ext4_file_open_kp,
	[EXT4_FILE_READ_ITER_PROBE] = &ext4_file_read_iter_kp,
	[EXT4_FILE_WRITE_ITER_PROBE] = &ext4_file_write_iter_kp,
	[EXT4_FILEMAP_FAULT_PROBE] = &ext4_filemap_fault_kp,
	[EXT4_FREEZE_PROBE] = &ext4_freeze_kp,
	[EXT4_GET_ACL_PROBE] = &ext4_get_acl_kp,
	[EXT4_GET_PARENT_PROBE] = &ext4_get_parent_kp,
	[EXT4_INVALIDATEPAGE_PROBE] = &ext4_invalidatepage_kp,
	[EXT4_IOCTL_PROBE] = &ext4_ioctl_kp,
	[EXT4_IOMAP_BEGIN_PROBE] = &ext4_iomap_begin_kp,
	[EXT4_IOMAP_END_PROBE] = &ext4_iomap_end_kp,
	[EXT4_LISTXATTR_PROBE] = &ext4_listxattr_kp,
	[EXT4_LLSEEK_PROBE] = &ext4_llseek_kp,
	[EXT4_MB_SEQ_GROUPS_NEXT_PROBE] = &ext4_mb_seq_groups_next_kp,
	[EXT4_MB_SEQ_GROUPS_SHOW_PROBE] = &ext4_mb_seq_groups_show_kp,
	[EXT4_MB_SEQ_GROUPS_START_PROBE] = &ext4_mb_seq_groups_start_kp,
	[EXT4_MB_SEQ_GROUPS_STOP_PROBE] = &ext4_mb_seq_groups_stop_kp,
	[EXT4_MOUNT_PROBE] = &ext4_mount_kp,
	[EXT4_NFS_COMMIT_METADATA_PROBE] = &ext4_nfs_commit_metadata_kp,
	[EXT4_PAGE_MKWRITE_PROBE] = &ext4_page_mkwrite_kp,
	[EXT4_PUT_SUPER_PROBE] = &ext4_put_super_kp,
	[EXT4_READDIR_PROBE] = &ext4_readdir_kp,
	[EXT4_READPAGE_PROBE] = &ext4_readpage_kp,
	[EXT4_READPAGES_PROBE] = &ext4_readpages_kp,
	[EXT4_RELEASE_DIR_PROBE] = &ext4_release_dir_kp,
	[EXT4_RELEASE_FILE_PROBE] = &ext4_release_file_kp,
	[EXT4_RELEASEPAGE_PROBE] = &ext4_releasepage_kp,
	[EXT4_REMOUNT_PROBE] = &ext4_remount_kp,
	[EXT4_SET_ACL_PROBE] = &ext4_set_acl_kp,
	[EXT4_SET_PAGE_DIRTY_PROBE] = &ext4_set_page_dirty_kp,
	[EXT4_SETATTR_PROBE] = &ext4_setattr_kp,
	[EXT4_SHOW_OPTIONS_PROBE] = &ext4_show_options_kp,
	[EXT4_STATFS_PROBE] = &ext4_statfs_kp,
	[EXT4_SYNC_FILE_PROBE] = &ext4_sync_file_kp,
	[EXT4_SYNC_FS_PROBE] = &ext4_sync_fs_kp,
	[EXT4_UNFREEZE_PROBE] = &ext4_unfreeze_kp,
	[EXT4_WRITE_BEGIN_PROBE] = &ext4_write_begin_kp,
	[EXT4_WRITE_END_PROBE] = &ext4_write_end_kp,
	[EXT4_WRITE_INODE_PROBE] = &ext4_write_inode_kp,
	[EXT4_WRITEPAGE_PROBE] = &ext4_writepage_kp,
	[EXT4_WRITEPAGE_PROBE] = &ext4_writepage_kp,

};


int ext4_alloc_inode_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_alloc_inode_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_bmap_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_bmap_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_da_invalidatepage_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_da_invalidatepage_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_da_write_begin_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_da_write_begin_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_da_write_end_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_da_write_end_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_dax_writepages_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_dax_writepages_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_destroy_inode_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_destroy_inode_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_dir_llseek_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_dir_llseek_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_dir_open_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_dir_open_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_direct_IO_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_direct_IO_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_dirty_inode_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_dirty_inode_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_drop_inode_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_drop_inode_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_evict_inode_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_evict_inode_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_fallocate_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_fallocate_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_fh_to_dentry_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_fh_to_dentry_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_fh_to_parent_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_fh_to_parent_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_fiemap_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_fiemap_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_file_getattr_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_file_getattr_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_file_mmap_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_file_mmap_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_file_open_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_file_open_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_file_read_iter_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_file_read_iter_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_file_write_iter_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_file_write_iter_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_filemap_fault_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_filemap_fault_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_freeze_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_freeze_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_get_acl_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_get_acl_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_get_parent_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_get_parent_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_invalidatepage_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_invalidatepage_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_ioctl_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_ioctl_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_iomap_begin_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_iomap_begin_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_iomap_end_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_iomap_end_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_listxattr_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_listxattr_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_llseek_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_llseek_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_mb_seq_groups_next_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_mb_seq_groups_next_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_mb_seq_groups_show_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_mb_seq_groups_show_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_mb_seq_groups_start_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_mb_seq_groups_start_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_mb_seq_groups_stop_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_mb_seq_groups_stop_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_mount_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_mount_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_nfs_commit_metadata_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_nfs_commit_metadata_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_page_mkwrite_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_page_mkwrite_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_put_super_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_put_super_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_readdir_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_readdir_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_readpage_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_readpage_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_readpages_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_readpages_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_release_dir_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_release_dir_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_release_file_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_release_file_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_releasepage_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_releasepage_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_remount_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_remount_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_set_acl_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_set_acl_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_set_page_dirty_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_set_page_dirty_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_setattr_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_setattr_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_show_options_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_show_options_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_statfs_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_statfs_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_sync_file_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_sync_file_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_sync_fs_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_sync_fs_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_unfreeze_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_unfreeze_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_write_begin_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_write_begin_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_write_end_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_write_end_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_write_inode_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_write_inode_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_writepage_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_writepage_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

int ext4_writepage_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, true);
    return 0;
}
int ext4_writepage_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    this_cpu_write(ext4_executing, false);
    return 0;
}

-----------------------------------------------------



#define I_BDEV_PROBE 0
#define __BDEV_DAX_SUPPORTED_PROBE 1
#define __BFORGET_PROBE 2
#define __BIO_ADD_PAGE_PROBE 3
#define __BLKDEV_ISSUE_DISCARD_PROBE 4
#define __BLKDEV_ISSUE_ZEROOUT_PROBE 5
#define __BLOCK_WRITE_BEGIN_PROBE 6
#define __BLOCKDEV_DIRECT_IO_PROBE 7
#define __BREAD_GFP_PROBE 8
#define __BREADAHEAD_GFP_PROBE 9
#define __BRELSE_PROBE 10
#define __CLEANCACHE_GET_PAGE_PROBE 11
#define __CLEANCACHE_INIT_FS_PROBE 12
#define __FDGET_PROBE 13
#define __FILEMAP_SET_WB_ERR_PROBE 14
#define __FIND_GET_BLOCK_PROBE 15
#define __GENERIC_FILE_FSYNC_PROBE 16
#define __GENERIC_FILE_WRITE_ITER_PROBE 17
#define __GETBLK_GFP_PROBE 18
#define __INIT_WAITQUEUE_HEAD_PROBE 19
#define __LOCK_BUFFER_PROBE 20
#define __MARK_INODE_DIRTY_PROBE 21
#define __MB_CACHE_ENTRY_FREE_PROBE 22
#define __PAGE_SYMLINK_PROBE 23
#define __PAGEVEC_RELEASE_PROBE 24
#define __PERCPU_DOWN_READ_PROBE 25
#define __PERCPU_INIT_RWSEM_PROBE 26
#define __PUT_PAGE_PROBE 27
#define __REFRIGERATOR_PROBE 28
#define __SET_PAGE_DIRTY_BUFFERS_PROBE 29
#define __SET_PAGE_DIRTY_NOBUFFERS_PROBE 30
#define __SYNC_DIRTY_BUFFER_PROBE 31
#define __TEST_SET_PAGE_WRITEBACK_PROBE 32
#define __VAR_WAITQUEUE_PROBE 33
#define __WAIT_ON_BUFFER_PROBE 34
#define __WAKE_UP_PROBE 35
#define __WARN_PRINTK_PROBE 36
#define ADD_TO_PAGE_CACHE_LRU_PROBE 37
#define BDEV_READ_ONLY_PROBE 38
#define BDEVNAME_PROBE 39
#define BH_SUBMIT_READ_PROBE 40
#define BH_UPTODATE_OR_LOCK_PROBE 41
#define BIO_ALLOC_BIOSET_PROBE 42
#define BIO_DEVNAME_PROBE 43
#define BIO_PUT_PROBE 44
#define BLK_FINISH_PLUG_PROBE 45
#define BLK_START_PLUG_PROBE 46
#define BLK_STATUS_TO_ERRNO_PROBE 47
#define BLKDEV_GET_BY_DEV_PROBE 48
#define BLKDEV_ISSUE_DISCARD_PROBE 49
#define BLKDEV_ISSUE_FLUSH_PROBE 50
#define BLKDEV_PUT_PROBE 51
#define BLOCK_COMMIT_WRITE_PROBE 52
#define BLOCK_INVALIDATEPAGE_PROBE 53
#define BLOCK_PAGE_MKWRITE_PROBE 54
#define BLOCK_READ_FULL_PAGE_PROBE 55
#define BLOCK_WRITE_END_PROBE 56
#define CAPABLE_PROBE 57
#define CLEAN_BDEV_ALIASES_PROBE 58
#define CLEAR_INODE_PROBE 59
#define CLEAR_NLINK_PROBE 60
#define CLEAR_PAGE_DIRTY_FOR_IO_PROBE 61
#define CREATE_EMPTY_BUFFERS_PROBE 62
#define CRYPTO_ALLOC_SHASH_PROBE 63
#define CRYPTO_DESTROY_TFM_PROBE 64
#define CRYPTO_SHASH_UPDATE_PROBE 65
#define CURRENT_TIME_PROBE 66
#define D_FIND_ANY_ALIAS_PROBE 67
#define D_INSTANTIATE_PROBE 68
#define D_INSTANTIATE_NEW_PROBE 69
#define D_MAKE_ROOT_PROBE 70
#define D_OBTAIN_ALIAS_PROBE 71
#define D_PATH_PROBE 72
#define D_SPLICE_ALIAS_PROBE 73
#define D_TMPFILE_PROBE 74
#define DAX_FINISH_SYNC_FAULT_PROBE 75
#define DAX_IOMAP_FAULT_PROBE 76
#define DAX_IOMAP_RW_PROBE 77
#define DAX_LAYOUT_BUSY_PAGE_PROBE 78
#define DAX_WRITEBACK_MAPPING_RANGE_PROBE 79
#define DEL_TIMER_SYNC_PROBE 80
#define DESTROY_WORKQUEUE_PROBE 81
#define DGET_PARENT_PROBE 82
#define DPUT_PROBE 83
#define DROP_NLINK_PROBE 84
#define DUMP_PAGE_PROBE 85
#define END_PAGE_WRITEBACK_PROBE 86
#define FIEMAP_FILL_NEXT_EXTENT_PROBE 87
#define FILE_CHECK_AND_ADVANCE_WB_ERR_PROBE 88
#define FILE_PATH_PROBE 89
#define FILE_REMOVE_PRIVS_PROBE 90
#define FILE_UPDATE_TIME_PROBE 91
#define FILE_WRITE_AND_WAIT_RANGE_PROBE 92
#define FILEMAP_FAULT_PROBE 93
#define FILEMAP_FLUSH_PROBE 94
#define FILEMAP_WRITE_AND_WAIT_RANGE_PROBE 95
#define FIND_INODE_NOWAIT_PROBE 96
#define FLUSH_WORKQUEUE_PROBE 97
#define FPUT_PROBE 98
#define FREEZE_BDEV_PROBE 99
#define FREEZING_SLOW_PATH_PROBE 100
#define FROM_KGID_PROBE 101
#define FROM_KGID_MUNGED_PROBE 102
#define FROM_KPROJID_PROBE 103
#define FS_DAX_GET_BY_BDEV_PROBE 104
#define GENERIC_BLOCK_BMAP_PROBE 105
#define GENERIC_BLOCK_FIEMAP_PROBE 106
#define GENERIC_CHECK_ADDRESSABLE_PROBE 107
#define GENERIC_FH_TO_DENTRY_PROBE 108
#define GENERIC_FH_TO_PARENT_PROBE 109
#define GENERIC_FILE_LLSEEK_SIZE_PROBE 110
#define GENERIC_FILE_READ_ITER_PROBE 111
#define GENERIC_FILLATTR_PROBE 112
#define GENERIC_WRITE_END_PROBE 113
#define GENERIC_WRITEPAGES_PROBE 114
#define GET_ACL_PROBE 115
#define GRAB_CACHE_PAGE_WRITE_BEGIN_PROBE 116
#define IGET_FAILED_PROBE 117
#define IGET_LOCKED_PROBE 118
#define IGRAB_PROBE 119
#define IHOLD_PROBE 120
#define IN_GROUP_P_PROBE 121
#define INC_NLINK_PROBE 122
#define INIT_SPECIAL_INODE_PROBE 123
#define INIT_TIMER_KEY_PROBE 124
#define INIT_WAIT_ENTRY_PROBE 125
#define INIT_WAIT_VAR_ENTRY_PROBE 126
#define INODE_DIO_WAIT_PROBE 127
#define INODE_INIT_ONCE_PROBE 128
#define INODE_INIT_OWNER_PROBE 129
#define INODE_NEEDS_SYNC_PROBE 130
#define INODE_NEWSIZE_OK_PROBE 131
#define INODE_NOHIGHMEM_PROBE 132
#define INODE_OWNER_OR_CAPABLE_PROBE 133
#define INODE_SET_FLAGS_PROBE 134
#define INSERT_INODE_LOCKED_PROBE 135
#define INVALIDATE_BDEV_PROBE 136
#define INVALIDATE_INODE_BUFFERS_PROBE 137
#define IOMAP_SEEK_DATA_PROBE 138
#define IOMAP_SEEK_HOLE_PROBE 139
#define IOMAP_ZERO_RANGE_PROBE 140
#define IPUT_PROBE 141
#define IS_BAD_INODE_PROBE 142
#define KERN_PATH_PROBE 143
#define KSTRDUP_PROBE 144
#define KSTRNDUP_PROBE 145
#define KTHREAD_CREATE_ON_NODE_PROBE 146
#define KTHREAD_SHOULD_STOP_PROBE 147
#define KTHREAD_STOP_PROBE 148
#define KTIME_GET_PROBE 149
#define KTIME_GET_REAL_SECONDS_PROBE 150
#define KTIME_GET_WITH_OFFSET_PROBE 151
#define LL_RW_BLOCK_PROBE 152
#define LOCK_TWO_NONDIRECTORIES_PROBE 153
#define MAKE_BAD_INODE_PROBE 154
#define MAKE_KGID_PROBE 155
#define MAKE_KPROJID_PROBE 156
#define MAKE_KUID_PROBE 157
#define MARK_BUFFER_DIRTY_PROBE 158
#define MARK_BUFFER_DIRTY_INODE_PROBE 159
#define MB_CACHE_CREATE_PROBE 160
#define MB_CACHE_DESTROY_PROBE 161
#define MB_CACHE_ENTRY_CREATE_PROBE 162
#define MB_CACHE_ENTRY_DELETE_PROBE 163
#define MB_CACHE_ENTRY_FIND_FIRST_PROBE 164
#define MB_CACHE_ENTRY_FIND_NEXT_PROBE 165
#define MB_CACHE_ENTRY_GET_PROBE 166
#define MB_CACHE_ENTRY_TOUCH_PROBE 167
#define MNT_DROP_WRITE_FILE_PROBE 168
#define MNT_WANT_WRITE_FILE_PROBE 169
#define MOD_TIMER_PROBE 170
#define MOUNT_BDEV_PROBE 171
#define NEW_INODE_PROBE 172
#define PAGE_MAPPED_PROBE 173
#define PAGE_ZERO_NEW_BUFFERS_PROBE 174
#define PAGECACHE_GET_PAGE_PROBE 175
#define PAGECACHE_ISIZE_EXTENDED_PROBE 176
#define PAGEVEC_LOOKUP_RANGE_PROBE 177
#define PARSE_OPTIONS_PROBE 178
#define PATH_PUT_PROBE 179
#define PERCPU_DOWN_WRITE_PROBE 180
#define PERCPU_FREE_RWSEM_PROBE 181
#define PERCPU_UP_WRITE_PROBE 182
#define POSIX_ACL_ALLOC_PROBE 183
#define POSIX_ACL_CHMOD_PROBE 184
#define POSIX_ACL_CREATE_PROBE 185
#define POSIX_ACL_UPDATE_MODE_PROBE 186
#define PREPARE_TO_WAIT_EVENT_PROBE 187
#define PRINTK_PROBE 188
#define PUT_DAX_PROBE 189
#define QUEUE_WORK_ON_PROBE 190
#define READ_CACHE_PAGES_PROBE 191
#define REDIRTY_PAGE_FOR_WRITEPAGE_PROBE 192
#define REGISTER_FILESYSTEM_PROBE 193
#define REGISTER_SHRINKER_PROBE 194
#define SB_MIN_BLOCKSIZE_PROBE 195
#define SB_SET_BLOCKSIZE_PROBE 196
#define SEQ_ESCAPE_PROBE 197
#define SEQ_PRINTF_PROBE 198
#define SEQ_PUTC_PROBE 199
#define SEQ_PUTS_PROBE 200
#define SET_BLOCKSIZE_PROBE 201
#define SET_CACHED_ACL_PROBE 202
#define SET_NLINK_PROBE 203
#define SET_TASK_IOPRIO_PROBE 204
#define SETATTR_COPY_PROBE 205
#define SETATTR_PREPARE_PROBE 206
#define SUBMIT_BH_PROBE 207
#define SUBMIT_BIO_PROBE 208
#define SUBMIT_BIO_WAIT_PROBE 209
#define SYNC_BLOCKDEV_PROBE 210
#define SYNC_DIRTY_BUFFER_PROBE 211
#define SYNC_FILESYSTEM_PROBE 212
#define SYNC_INODE_METADATA_PROBE 213
#define SYNC_MAPPING_BUFFERS_PROBE 214
#define TAG_PAGES_FOR_WRITEBACK_PROBE 215
#define THAW_BDEV_PROBE 216
#define TOUCH_ATIME_PROBE 217
#define TRUNCATE_INODE_PAGES_PROBE 218
#define TRUNCATE_INODE_PAGES_FINAL_PROBE 219
#define TRUNCATE_PAGECACHE_PROBE 220
#define TRUNCATE_PAGECACHE_RANGE_PROBE 221
#define TRY_TO_FREE_BUFFERS_PROBE 222
#define TRY_TO_WRITEBACK_INODES_SB_PROBE 223
#define UNLOCK_BUFFER_PROBE 224
#define UNLOCK_NEW_INODE_PROBE 225
#define UNLOCK_TWO_NONDIRECTORIES_PROBE 226
#define UNREGISTER_FILESYSTEM_PROBE 227
#define VFS_FSYNC_RANGE_PROBE 228
#define VFS_SETPOS_PROBE 229


int I_BDEV_pre_handler(struct kprobe *p, struct pt_regs *regs);
int I_BDEV_post_handler(struct kprobe *p, struct pt_regs *regs);

int __bdev_dax_supported_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __bdev_dax_supported_post_handler(struct kprobe *p, struct pt_regs *regs);

int __bforget_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __bforget_post_handler(struct kprobe *p, struct pt_regs *regs);

int __bio_add_page_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __bio_add_page_post_handler(struct kprobe *p, struct pt_regs *regs);

int __blkdev_issue_discard_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __blkdev_issue_discard_post_handler(struct kprobe *p, struct pt_regs *regs);

int __blkdev_issue_zeroout_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __blkdev_issue_zeroout_post_handler(struct kprobe *p, struct pt_regs *regs);

int __block_write_begin_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __block_write_begin_post_handler(struct kprobe *p, struct pt_regs *regs);

int __blockdev_direct_IO_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __blockdev_direct_IO_post_handler(struct kprobe *p, struct pt_regs *regs);

int __bread_gfp_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __bread_gfp_post_handler(struct kprobe *p, struct pt_regs *regs);

int __breadahead_gfp_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __breadahead_gfp_post_handler(struct kprobe *p, struct pt_regs *regs);

int __brelse_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __brelse_post_handler(struct kprobe *p, struct pt_regs *regs);

int __cleancache_get_page_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __cleancache_get_page_post_handler(struct kprobe *p, struct pt_regs *regs);

int __cleancache_init_fs_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __cleancache_init_fs_post_handler(struct kprobe *p, struct pt_regs *regs);

int __fdget_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __fdget_post_handler(struct kprobe *p, struct pt_regs *regs);

int __filemap_set_wb_err_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __filemap_set_wb_err_post_handler(struct kprobe *p, struct pt_regs *regs);

int __find_get_block_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __find_get_block_post_handler(struct kprobe *p, struct pt_regs *regs);

int __generic_file_fsync_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __generic_file_fsync_post_handler(struct kprobe *p, struct pt_regs *regs);

int __generic_file_write_iter_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __generic_file_write_iter_post_handler(struct kprobe *p, struct pt_regs *regs);

int __getblk_gfp_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __getblk_gfp_post_handler(struct kprobe *p, struct pt_regs *regs);

int __init_waitqueue_head_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __init_waitqueue_head_post_handler(struct kprobe *p, struct pt_regs *regs);

int __lock_buffer_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __lock_buffer_post_handler(struct kprobe *p, struct pt_regs *regs);

int __mark_inode_dirty_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __mark_inode_dirty_post_handler(struct kprobe *p, struct pt_regs *regs);

int __mb_cache_entry_free_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __mb_cache_entry_free_post_handler(struct kprobe *p, struct pt_regs *regs);

int __page_symlink_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __page_symlink_post_handler(struct kprobe *p, struct pt_regs *regs);

int __pagevec_release_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __pagevec_release_post_handler(struct kprobe *p, struct pt_regs *regs);

int __percpu_down_read_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __percpu_down_read_post_handler(struct kprobe *p, struct pt_regs *regs);

int __percpu_init_rwsem_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __percpu_init_rwsem_post_handler(struct kprobe *p, struct pt_regs *regs);

int __put_page_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __put_page_post_handler(struct kprobe *p, struct pt_regs *regs);

int __refrigerator_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __refrigerator_post_handler(struct kprobe *p, struct pt_regs *regs);

int __set_page_dirty_buffers_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __set_page_dirty_buffers_post_handler(struct kprobe *p, struct pt_regs *regs);

int __set_page_dirty_nobuffers_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __set_page_dirty_nobuffers_post_handler(struct kprobe *p, struct pt_regs *regs);

int __sync_dirty_buffer_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __sync_dirty_buffer_post_handler(struct kprobe *p, struct pt_regs *regs);

int __test_set_page_writeback_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __test_set_page_writeback_post_handler(struct kprobe *p, struct pt_regs *regs);

int __var_waitqueue_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __var_waitqueue_post_handler(struct kprobe *p, struct pt_regs *regs);

int __wait_on_buffer_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __wait_on_buffer_post_handler(struct kprobe *p, struct pt_regs *regs);

int __wake_up_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __wake_up_post_handler(struct kprobe *p, struct pt_regs *regs);

int __warn_printk_pre_handler(struct kprobe *p, struct pt_regs *regs);
int __warn_printk_post_handler(struct kprobe *p, struct pt_regs *regs);

int add_to_page_cache_lru_pre_handler(struct kprobe *p, struct pt_regs *regs);
int add_to_page_cache_lru_post_handler(struct kprobe *p, struct pt_regs *regs);

int bdev_read_only_pre_handler(struct kprobe *p, struct pt_regs *regs);
int bdev_read_only_post_handler(struct kprobe *p, struct pt_regs *regs);

int bdevname_pre_handler(struct kprobe *p, struct pt_regs *regs);
int bdevname_post_handler(struct kprobe *p, struct pt_regs *regs);

int bh_submit_read_pre_handler(struct kprobe *p, struct pt_regs *regs);
int bh_submit_read_post_handler(struct kprobe *p, struct pt_regs *regs);

int bh_uptodate_or_lock_pre_handler(struct kprobe *p, struct pt_regs *regs);
int bh_uptodate_or_lock_post_handler(struct kprobe *p, struct pt_regs *regs);

int bio_alloc_bioset_pre_handler(struct kprobe *p, struct pt_regs *regs);
int bio_alloc_bioset_post_handler(struct kprobe *p, struct pt_regs *regs);

int bio_devname_pre_handler(struct kprobe *p, struct pt_regs *regs);
int bio_devname_post_handler(struct kprobe *p, struct pt_regs *regs);

int bio_put_pre_handler(struct kprobe *p, struct pt_regs *regs);
int bio_put_post_handler(struct kprobe *p, struct pt_regs *regs);

int blk_finish_plug_pre_handler(struct kprobe *p, struct pt_regs *regs);
int blk_finish_plug_post_handler(struct kprobe *p, struct pt_regs *regs);

int blk_start_plug_pre_handler(struct kprobe *p, struct pt_regs *regs);
int blk_start_plug_post_handler(struct kprobe *p, struct pt_regs *regs);

int blk_status_to_errno_pre_handler(struct kprobe *p, struct pt_regs *regs);
int blk_status_to_errno_post_handler(struct kprobe *p, struct pt_regs *regs);

int blkdev_get_by_dev_pre_handler(struct kprobe *p, struct pt_regs *regs);
int blkdev_get_by_dev_post_handler(struct kprobe *p, struct pt_regs *regs);

int blkdev_issue_discard_pre_handler(struct kprobe *p, struct pt_regs *regs);
int blkdev_issue_discard_post_handler(struct kprobe *p, struct pt_regs *regs);

int blkdev_issue_flush_pre_handler(struct kprobe *p, struct pt_regs *regs);
int blkdev_issue_flush_post_handler(struct kprobe *p, struct pt_regs *regs);

int blkdev_put_pre_handler(struct kprobe *p, struct pt_regs *regs);
int blkdev_put_post_handler(struct kprobe *p, struct pt_regs *regs);

int block_commit_write_pre_handler(struct kprobe *p, struct pt_regs *regs);
int block_commit_write_post_handler(struct kprobe *p, struct pt_regs *regs);

int block_invalidatepage_pre_handler(struct kprobe *p, struct pt_regs *regs);
int block_invalidatepage_post_handler(struct kprobe *p, struct pt_regs *regs);

int block_page_mkwrite_pre_handler(struct kprobe *p, struct pt_regs *regs);
int block_page_mkwrite_post_handler(struct kprobe *p, struct pt_regs *regs);

int block_read_full_page_pre_handler(struct kprobe *p, struct pt_regs *regs);
int block_read_full_page_post_handler(struct kprobe *p, struct pt_regs *regs);

int block_write_end_pre_handler(struct kprobe *p, struct pt_regs *regs);
int block_write_end_post_handler(struct kprobe *p, struct pt_regs *regs);

int capable_pre_handler(struct kprobe *p, struct pt_regs *regs);
int capable_post_handler(struct kprobe *p, struct pt_regs *regs);

int clean_bdev_aliases_pre_handler(struct kprobe *p, struct pt_regs *regs);
int clean_bdev_aliases_post_handler(struct kprobe *p, struct pt_regs *regs);

int clear_inode_pre_handler(struct kprobe *p, struct pt_regs *regs);
int clear_inode_post_handler(struct kprobe *p, struct pt_regs *regs);

int clear_nlink_pre_handler(struct kprobe *p, struct pt_regs *regs);
int clear_nlink_post_handler(struct kprobe *p, struct pt_regs *regs);

int clear_page_dirty_for_io_pre_handler(struct kprobe *p, struct pt_regs *regs);
int clear_page_dirty_for_io_post_handler(struct kprobe *p, struct pt_regs *regs);

int create_empty_buffers_pre_handler(struct kprobe *p, struct pt_regs *regs);
int create_empty_buffers_post_handler(struct kprobe *p, struct pt_regs *regs);

int crypto_alloc_shash_pre_handler(struct kprobe *p, struct pt_regs *regs);
int crypto_alloc_shash_post_handler(struct kprobe *p, struct pt_regs *regs);

int crypto_destroy_tfm_pre_handler(struct kprobe *p, struct pt_regs *regs);
int crypto_destroy_tfm_post_handler(struct kprobe *p, struct pt_regs *regs);

int crypto_shash_update_pre_handler(struct kprobe *p, struct pt_regs *regs);
int crypto_shash_update_post_handler(struct kprobe *p, struct pt_regs *regs);

int current_time_pre_handler(struct kprobe *p, struct pt_regs *regs);
int current_time_post_handler(struct kprobe *p, struct pt_regs *regs);

int d_find_any_alias_pre_handler(struct kprobe *p, struct pt_regs *regs);
int d_find_any_alias_post_handler(struct kprobe *p, struct pt_regs *regs);

int d_instantiate_pre_handler(struct kprobe *p, struct pt_regs *regs);
int d_instantiate_post_handler(struct kprobe *p, struct pt_regs *regs);

int d_instantiate_new_pre_handler(struct kprobe *p, struct pt_regs *regs);
int d_instantiate_new_post_handler(struct kprobe *p, struct pt_regs *regs);

int d_make_root_pre_handler(struct kprobe *p, struct pt_regs *regs);
int d_make_root_post_handler(struct kprobe *p, struct pt_regs *regs);

int d_obtain_alias_pre_handler(struct kprobe *p, struct pt_regs *regs);
int d_obtain_alias_post_handler(struct kprobe *p, struct pt_regs *regs);

int d_path_pre_handler(struct kprobe *p, struct pt_regs *regs);
int d_path_post_handler(struct kprobe *p, struct pt_regs *regs);

int d_splice_alias_pre_handler(struct kprobe *p, struct pt_regs *regs);
int d_splice_alias_post_handler(struct kprobe *p, struct pt_regs *regs);

int d_tmpfile_pre_handler(struct kprobe *p, struct pt_regs *regs);
int d_tmpfile_post_handler(struct kprobe *p, struct pt_regs *regs);

int dax_finish_sync_fault_pre_handler(struct kprobe *p, struct pt_regs *regs);
int dax_finish_sync_fault_post_handler(struct kprobe *p, struct pt_regs *regs);

int dax_iomap_fault_pre_handler(struct kprobe *p, struct pt_regs *regs);
int dax_iomap_fault_post_handler(struct kprobe *p, struct pt_regs *regs);

int dax_iomap_rw_pre_handler(struct kprobe *p, struct pt_regs *regs);
int dax_iomap_rw_post_handler(struct kprobe *p, struct pt_regs *regs);

int dax_layout_busy_page_pre_handler(struct kprobe *p, struct pt_regs *regs);
int dax_layout_busy_page_post_handler(struct kprobe *p, struct pt_regs *regs);

int dax_writeback_mapping_range_pre_handler(struct kprobe *p, struct pt_regs *regs);
int dax_writeback_mapping_range_post_handler(struct kprobe *p, struct pt_regs *regs);

int del_timer_sync_pre_handler(struct kprobe *p, struct pt_regs *regs);
int del_timer_sync_post_handler(struct kprobe *p, struct pt_regs *regs);

int destroy_workqueue_pre_handler(struct kprobe *p, struct pt_regs *regs);
int destroy_workqueue_post_handler(struct kprobe *p, struct pt_regs *regs);

int dget_parent_pre_handler(struct kprobe *p, struct pt_regs *regs);
int dget_parent_post_handler(struct kprobe *p, struct pt_regs *regs);

int dput_pre_handler(struct kprobe *p, struct pt_regs *regs);
int dput_post_handler(struct kprobe *p, struct pt_regs *regs);

int drop_nlink_pre_handler(struct kprobe *p, struct pt_regs *regs);
int drop_nlink_post_handler(struct kprobe *p, struct pt_regs *regs);

int dump_page_pre_handler(struct kprobe *p, struct pt_regs *regs);
int dump_page_post_handler(struct kprobe *p, struct pt_regs *regs);

int end_page_writeback_pre_handler(struct kprobe *p, struct pt_regs *regs);
int end_page_writeback_post_handler(struct kprobe *p, struct pt_regs *regs);

int fiemap_fill_next_extent_pre_handler(struct kprobe *p, struct pt_regs *regs);
int fiemap_fill_next_extent_post_handler(struct kprobe *p, struct pt_regs *regs);

int file_check_and_advance_wb_err_pre_handler(struct kprobe *p, struct pt_regs *regs);
int file_check_and_advance_wb_err_post_handler(struct kprobe *p, struct pt_regs *regs);

int file_path_pre_handler(struct kprobe *p, struct pt_regs *regs);
int file_path_post_handler(struct kprobe *p, struct pt_regs *regs);

int file_remove_privs_pre_handler(struct kprobe *p, struct pt_regs *regs);
int file_remove_privs_post_handler(struct kprobe *p, struct pt_regs *regs);

int file_update_time_pre_handler(struct kprobe *p, struct pt_regs *regs);
int file_update_time_post_handler(struct kprobe *p, struct pt_regs *regs);

int file_write_and_wait_range_pre_handler(struct kprobe *p, struct pt_regs *regs);
int file_write_and_wait_range_post_handler(struct kprobe *p, struct pt_regs *regs);

int filemap_fault_pre_handler(struct kprobe *p, struct pt_regs *regs);
int filemap_fault_post_handler(struct kprobe *p, struct pt_regs *regs);

int filemap_flush_pre_handler(struct kprobe *p, struct pt_regs *regs);
int filemap_flush_post_handler(struct kprobe *p, struct pt_regs *regs);

int filemap_write_and_wait_range_pre_handler(struct kprobe *p, struct pt_regs *regs);
int filemap_write_and_wait_range_post_handler(struct kprobe *p, struct pt_regs *regs);

int find_inode_nowait_pre_handler(struct kprobe *p, struct pt_regs *regs);
int find_inode_nowait_post_handler(struct kprobe *p, struct pt_regs *regs);

int flush_workqueue_pre_handler(struct kprobe *p, struct pt_regs *regs);
int flush_workqueue_post_handler(struct kprobe *p, struct pt_regs *regs);

int fput_pre_handler(struct kprobe *p, struct pt_regs *regs);
int fput_post_handler(struct kprobe *p, struct pt_regs *regs);

int freeze_bdev_pre_handler(struct kprobe *p, struct pt_regs *regs);
int freeze_bdev_post_handler(struct kprobe *p, struct pt_regs *regs);

int freezing_slow_path_pre_handler(struct kprobe *p, struct pt_regs *regs);
int freezing_slow_path_post_handler(struct kprobe *p, struct pt_regs *regs);

int from_kgid_pre_handler(struct kprobe *p, struct pt_regs *regs);
int from_kgid_post_handler(struct kprobe *p, struct pt_regs *regs);

int from_kgid_munged_pre_handler(struct kprobe *p, struct pt_regs *regs);
int from_kgid_munged_post_handler(struct kprobe *p, struct pt_regs *regs);

int from_kprojid_pre_handler(struct kprobe *p, struct pt_regs *regs);
int from_kprojid_post_handler(struct kprobe *p, struct pt_regs *regs);

int fs_dax_get_by_bdev_pre_handler(struct kprobe *p, struct pt_regs *regs);
int fs_dax_get_by_bdev_post_handler(struct kprobe *p, struct pt_regs *regs);

int generic_block_bmap_pre_handler(struct kprobe *p, struct pt_regs *regs);
int generic_block_bmap_post_handler(struct kprobe *p, struct pt_regs *regs);

int generic_block_fiemap_pre_handler(struct kprobe *p, struct pt_regs *regs);
int generic_block_fiemap_post_handler(struct kprobe *p, struct pt_regs *regs);

int generic_check_addressable_pre_handler(struct kprobe *p, struct pt_regs *regs);
int generic_check_addressable_post_handler(struct kprobe *p, struct pt_regs *regs);

int generic_fh_to_dentry_pre_handler(struct kprobe *p, struct pt_regs *regs);
int generic_fh_to_dentry_post_handler(struct kprobe *p, struct pt_regs *regs);

int generic_fh_to_parent_pre_handler(struct kprobe *p, struct pt_regs *regs);
int generic_fh_to_parent_post_handler(struct kprobe *p, struct pt_regs *regs);

int generic_file_llseek_size_pre_handler(struct kprobe *p, struct pt_regs *regs);
int generic_file_llseek_size_post_handler(struct kprobe *p, struct pt_regs *regs);

int generic_file_read_iter_pre_handler(struct kprobe *p, struct pt_regs *regs);
int generic_file_read_iter_post_handler(struct kprobe *p, struct pt_regs *regs);

int generic_fillattr_pre_handler(struct kprobe *p, struct pt_regs *regs);
int generic_fillattr_post_handler(struct kprobe *p, struct pt_regs *regs);

int generic_write_end_pre_handler(struct kprobe *p, struct pt_regs *regs);
int generic_write_end_post_handler(struct kprobe *p, struct pt_regs *regs);

int generic_writepages_pre_handler(struct kprobe *p, struct pt_regs *regs);
int generic_writepages_post_handler(struct kprobe *p, struct pt_regs *regs);

int get_acl_pre_handler(struct kprobe *p, struct pt_regs *regs);
int get_acl_post_handler(struct kprobe *p, struct pt_regs *regs);

int grab_cache_page_write_begin_pre_handler(struct kprobe *p, struct pt_regs *regs);
int grab_cache_page_write_begin_post_handler(struct kprobe *p, struct pt_regs *regs);

int iget_failed_pre_handler(struct kprobe *p, struct pt_regs *regs);
int iget_failed_post_handler(struct kprobe *p, struct pt_regs *regs);

int iget_locked_pre_handler(struct kprobe *p, struct pt_regs *regs);
int iget_locked_post_handler(struct kprobe *p, struct pt_regs *regs);

int igrab_pre_handler(struct kprobe *p, struct pt_regs *regs);
int igrab_post_handler(struct kprobe *p, struct pt_regs *regs);

int ihold_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ihold_post_handler(struct kprobe *p, struct pt_regs *regs);

int in_group_p_pre_handler(struct kprobe *p, struct pt_regs *regs);
int in_group_p_post_handler(struct kprobe *p, struct pt_regs *regs);

int inc_nlink_pre_handler(struct kprobe *p, struct pt_regs *regs);
int inc_nlink_post_handler(struct kprobe *p, struct pt_regs *regs);

int init_special_inode_pre_handler(struct kprobe *p, struct pt_regs *regs);
int init_special_inode_post_handler(struct kprobe *p, struct pt_regs *regs);

int init_timer_key_pre_handler(struct kprobe *p, struct pt_regs *regs);
int init_timer_key_post_handler(struct kprobe *p, struct pt_regs *regs);

int init_wait_entry_pre_handler(struct kprobe *p, struct pt_regs *regs);
int init_wait_entry_post_handler(struct kprobe *p, struct pt_regs *regs);

int init_wait_var_entry_pre_handler(struct kprobe *p, struct pt_regs *regs);
int init_wait_var_entry_post_handler(struct kprobe *p, struct pt_regs *regs);

int inode_dio_wait_pre_handler(struct kprobe *p, struct pt_regs *regs);
int inode_dio_wait_post_handler(struct kprobe *p, struct pt_regs *regs);

int inode_init_once_pre_handler(struct kprobe *p, struct pt_regs *regs);
int inode_init_once_post_handler(struct kprobe *p, struct pt_regs *regs);

int inode_init_owner_pre_handler(struct kprobe *p, struct pt_regs *regs);
int inode_init_owner_post_handler(struct kprobe *p, struct pt_regs *regs);

int inode_needs_sync_pre_handler(struct kprobe *p, struct pt_regs *regs);
int inode_needs_sync_post_handler(struct kprobe *p, struct pt_regs *regs);

int inode_newsize_ok_pre_handler(struct kprobe *p, struct pt_regs *regs);
int inode_newsize_ok_post_handler(struct kprobe *p, struct pt_regs *regs);

int inode_nohighmem_pre_handler(struct kprobe *p, struct pt_regs *regs);
int inode_nohighmem_post_handler(struct kprobe *p, struct pt_regs *regs);

int inode_owner_or_capable_pre_handler(struct kprobe *p, struct pt_regs *regs);
int inode_owner_or_capable_post_handler(struct kprobe *p, struct pt_regs *regs);

int inode_set_flags_pre_handler(struct kprobe *p, struct pt_regs *regs);
int inode_set_flags_post_handler(struct kprobe *p, struct pt_regs *regs);

int insert_inode_locked_pre_handler(struct kprobe *p, struct pt_regs *regs);
int insert_inode_locked_post_handler(struct kprobe *p, struct pt_regs *regs);

int invalidate_bdev_pre_handler(struct kprobe *p, struct pt_regs *regs);
int invalidate_bdev_post_handler(struct kprobe *p, struct pt_regs *regs);

int invalidate_inode_buffers_pre_handler(struct kprobe *p, struct pt_regs *regs);
int invalidate_inode_buffers_post_handler(struct kprobe *p, struct pt_regs *regs);

int iomap_seek_data_pre_handler(struct kprobe *p, struct pt_regs *regs);
int iomap_seek_data_post_handler(struct kprobe *p, struct pt_regs *regs);

int iomap_seek_hole_pre_handler(struct kprobe *p, struct pt_regs *regs);
int iomap_seek_hole_post_handler(struct kprobe *p, struct pt_regs *regs);

int iomap_zero_range_pre_handler(struct kprobe *p, struct pt_regs *regs);
int iomap_zero_range_post_handler(struct kprobe *p, struct pt_regs *regs);

int iput_pre_handler(struct kprobe *p, struct pt_regs *regs);
int iput_post_handler(struct kprobe *p, struct pt_regs *regs);

int is_bad_inode_pre_handler(struct kprobe *p, struct pt_regs *regs);
int is_bad_inode_post_handler(struct kprobe *p, struct pt_regs *regs);

int kern_path_pre_handler(struct kprobe *p, struct pt_regs *regs);
int kern_path_post_handler(struct kprobe *p, struct pt_regs *regs);

int kstrdup_pre_handler(struct kprobe *p, struct pt_regs *regs);
int kstrdup_post_handler(struct kprobe *p, struct pt_regs *regs);

int kstrndup_pre_handler(struct kprobe *p, struct pt_regs *regs);
int kstrndup_post_handler(struct kprobe *p, struct pt_regs *regs);

int kthread_create_on_node_pre_handler(struct kprobe *p, struct pt_regs *regs);
int kthread_create_on_node_post_handler(struct kprobe *p, struct pt_regs *regs);

int kthread_should_stop_pre_handler(struct kprobe *p, struct pt_regs *regs);
int kthread_should_stop_post_handler(struct kprobe *p, struct pt_regs *regs);

int kthread_stop_pre_handler(struct kprobe *p, struct pt_regs *regs);
int kthread_stop_post_handler(struct kprobe *p, struct pt_regs *regs);

int ktime_get_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ktime_get_post_handler(struct kprobe *p, struct pt_regs *regs);

int ktime_get_real_seconds_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ktime_get_real_seconds_post_handler(struct kprobe *p, struct pt_regs *regs);

int ktime_get_with_offset_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ktime_get_with_offset_post_handler(struct kprobe *p, struct pt_regs *regs);

int ll_rw_block_pre_handler(struct kprobe *p, struct pt_regs *regs);
int ll_rw_block_post_handler(struct kprobe *p, struct pt_regs *regs);

int lock_two_nondirectories_pre_handler(struct kprobe *p, struct pt_regs *regs);
int lock_two_nondirectories_post_handler(struct kprobe *p, struct pt_regs *regs);

int make_bad_inode_pre_handler(struct kprobe *p, struct pt_regs *regs);
int make_bad_inode_post_handler(struct kprobe *p, struct pt_regs *regs);

int make_kgid_pre_handler(struct kprobe *p, struct pt_regs *regs);
int make_kgid_post_handler(struct kprobe *p, struct pt_regs *regs);

int make_kprojid_pre_handler(struct kprobe *p, struct pt_regs *regs);
int make_kprojid_post_handler(struct kprobe *p, struct pt_regs *regs);

int make_kuid_pre_handler(struct kprobe *p, struct pt_regs *regs);
int make_kuid_post_handler(struct kprobe *p, struct pt_regs *regs);

int mark_buffer_dirty_pre_handler(struct kprobe *p, struct pt_regs *regs);
int mark_buffer_dirty_post_handler(struct kprobe *p, struct pt_regs *regs);

int mark_buffer_dirty_inode_pre_handler(struct kprobe *p, struct pt_regs *regs);
int mark_buffer_dirty_inode_post_handler(struct kprobe *p, struct pt_regs *regs);

int mb_cache_create_pre_handler(struct kprobe *p, struct pt_regs *regs);
int mb_cache_create_post_handler(struct kprobe *p, struct pt_regs *regs);

int mb_cache_destroy_pre_handler(struct kprobe *p, struct pt_regs *regs);
int mb_cache_destroy_post_handler(struct kprobe *p, struct pt_regs *regs);

int mb_cache_entry_create_pre_handler(struct kprobe *p, struct pt_regs *regs);
int mb_cache_entry_create_post_handler(struct kprobe *p, struct pt_regs *regs);

int mb_cache_entry_delete_pre_handler(struct kprobe *p, struct pt_regs *regs);
int mb_cache_entry_delete_post_handler(struct kprobe *p, struct pt_regs *regs);

int mb_cache_entry_find_first_pre_handler(struct kprobe *p, struct pt_regs *regs);
int mb_cache_entry_find_first_post_handler(struct kprobe *p, struct pt_regs *regs);

int mb_cache_entry_find_next_pre_handler(struct kprobe *p, struct pt_regs *regs);
int mb_cache_entry_find_next_post_handler(struct kprobe *p, struct pt_regs *regs);

int mb_cache_entry_get_pre_handler(struct kprobe *p, struct pt_regs *regs);
int mb_cache_entry_get_post_handler(struct kprobe *p, struct pt_regs *regs);

int mb_cache_entry_touch_pre_handler(struct kprobe *p, struct pt_regs *regs);
int mb_cache_entry_touch_post_handler(struct kprobe *p, struct pt_regs *regs);

int mnt_drop_write_file_pre_handler(struct kprobe *p, struct pt_regs *regs);
int mnt_drop_write_file_post_handler(struct kprobe *p, struct pt_regs *regs);

int mnt_want_write_file_pre_handler(struct kprobe *p, struct pt_regs *regs);
int mnt_want_write_file_post_handler(struct kprobe *p, struct pt_regs *regs);

int mod_timer_pre_handler(struct kprobe *p, struct pt_regs *regs);
int mod_timer_post_handler(struct kprobe *p, struct pt_regs *regs);

int mount_bdev_pre_handler(struct kprobe *p, struct pt_regs *regs);
int mount_bdev_post_handler(struct kprobe *p, struct pt_regs *regs);

int new_inode_pre_handler(struct kprobe *p, struct pt_regs *regs);
int new_inode_post_handler(struct kprobe *p, struct pt_regs *regs);

int page_mapped_pre_handler(struct kprobe *p, struct pt_regs *regs);
int page_mapped_post_handler(struct kprobe *p, struct pt_regs *regs);

int page_zero_new_buffers_pre_handler(struct kprobe *p, struct pt_regs *regs);
int page_zero_new_buffers_post_handler(struct kprobe *p, struct pt_regs *regs);

int pagecache_get_page_pre_handler(struct kprobe *p, struct pt_regs *regs);
int pagecache_get_page_post_handler(struct kprobe *p, struct pt_regs *regs);

int pagecache_isize_extended_pre_handler(struct kprobe *p, struct pt_regs *regs);
int pagecache_isize_extended_post_handler(struct kprobe *p, struct pt_regs *regs);

int pagevec_lookup_range_pre_handler(struct kprobe *p, struct pt_regs *regs);
int pagevec_lookup_range_post_handler(struct kprobe *p, struct pt_regs *regs);

int parse_options_pre_handler(struct kprobe *p, struct pt_regs *regs);
int parse_options_post_handler(struct kprobe *p, struct pt_regs *regs);

int path_put_pre_handler(struct kprobe *p, struct pt_regs *regs);
int path_put_post_handler(struct kprobe *p, struct pt_regs *regs);

int percpu_down_write_pre_handler(struct kprobe *p, struct pt_regs *regs);
int percpu_down_write_post_handler(struct kprobe *p, struct pt_regs *regs);

int percpu_free_rwsem_pre_handler(struct kprobe *p, struct pt_regs *regs);
int percpu_free_rwsem_post_handler(struct kprobe *p, struct pt_regs *regs);

int percpu_up_write_pre_handler(struct kprobe *p, struct pt_regs *regs);
int percpu_up_write_post_handler(struct kprobe *p, struct pt_regs *regs);

int posix_acl_alloc_pre_handler(struct kprobe *p, struct pt_regs *regs);
int posix_acl_alloc_post_handler(struct kprobe *p, struct pt_regs *regs);

int posix_acl_chmod_pre_handler(struct kprobe *p, struct pt_regs *regs);
int posix_acl_chmod_post_handler(struct kprobe *p, struct pt_regs *regs);

int posix_acl_create_pre_handler(struct kprobe *p, struct pt_regs *regs);
int posix_acl_create_post_handler(struct kprobe *p, struct pt_regs *regs);

int posix_acl_update_mode_pre_handler(struct kprobe *p, struct pt_regs *regs);
int posix_acl_update_mode_post_handler(struct kprobe *p, struct pt_regs *regs);

int prepare_to_wait_event_pre_handler(struct kprobe *p, struct pt_regs *regs);
int prepare_to_wait_event_post_handler(struct kprobe *p, struct pt_regs *regs);

int printk_pre_handler(struct kprobe *p, struct pt_regs *regs);
int printk_post_handler(struct kprobe *p, struct pt_regs *regs);

int put_dax_pre_handler(struct kprobe *p, struct pt_regs *regs);
int put_dax_post_handler(struct kprobe *p, struct pt_regs *regs);

int queue_work_on_pre_handler(struct kprobe *p, struct pt_regs *regs);
int queue_work_on_post_handler(struct kprobe *p, struct pt_regs *regs);

int read_cache_pages_pre_handler(struct kprobe *p, struct pt_regs *regs);
int read_cache_pages_post_handler(struct kprobe *p, struct pt_regs *regs);

int redirty_page_for_writepage_pre_handler(struct kprobe *p, struct pt_regs *regs);
int redirty_page_for_writepage_post_handler(struct kprobe *p, struct pt_regs *regs);

int register_filesystem_pre_handler(struct kprobe *p, struct pt_regs *regs);
int register_filesystem_post_handler(struct kprobe *p, struct pt_regs *regs);

int register_shrinker_pre_handler(struct kprobe *p, struct pt_regs *regs);
int register_shrinker_post_handler(struct kprobe *p, struct pt_regs *regs);

int sb_min_blocksize_pre_handler(struct kprobe *p, struct pt_regs *regs);
int sb_min_blocksize_post_handler(struct kprobe *p, struct pt_regs *regs);

int sb_set_blocksize_pre_handler(struct kprobe *p, struct pt_regs *regs);
int sb_set_blocksize_post_handler(struct kprobe *p, struct pt_regs *regs);

int seq_escape_pre_handler(struct kprobe *p, struct pt_regs *regs);
int seq_escape_post_handler(struct kprobe *p, struct pt_regs *regs);

int seq_printf_pre_handler(struct kprobe *p, struct pt_regs *regs);
int seq_printf_post_handler(struct kprobe *p, struct pt_regs *regs);

int seq_putc_pre_handler(struct kprobe *p, struct pt_regs *regs);
int seq_putc_post_handler(struct kprobe *p, struct pt_regs *regs);

int seq_puts_pre_handler(struct kprobe *p, struct pt_regs *regs);
int seq_puts_post_handler(struct kprobe *p, struct pt_regs *regs);

int set_blocksize_pre_handler(struct kprobe *p, struct pt_regs *regs);
int set_blocksize_post_handler(struct kprobe *p, struct pt_regs *regs);

int set_cached_acl_pre_handler(struct kprobe *p, struct pt_regs *regs);
int set_cached_acl_post_handler(struct kprobe *p, struct pt_regs *regs);

int set_nlink_pre_handler(struct kprobe *p, struct pt_regs *regs);
int set_nlink_post_handler(struct kprobe *p, struct pt_regs *regs);

int set_task_ioprio_pre_handler(struct kprobe *p, struct pt_regs *regs);
int set_task_ioprio_post_handler(struct kprobe *p, struct pt_regs *regs);

int setattr_copy_pre_handler(struct kprobe *p, struct pt_regs *regs);
int setattr_copy_post_handler(struct kprobe *p, struct pt_regs *regs);

int setattr_prepare_pre_handler(struct kprobe *p, struct pt_regs *regs);
int setattr_prepare_post_handler(struct kprobe *p, struct pt_regs *regs);

int submit_bh_pre_handler(struct kprobe *p, struct pt_regs *regs);
int submit_bh_post_handler(struct kprobe *p, struct pt_regs *regs);

int submit_bio_pre_handler(struct kprobe *p, struct pt_regs *regs);
int submit_bio_post_handler(struct kprobe *p, struct pt_regs *regs);

int submit_bio_wait_pre_handler(struct kprobe *p, struct pt_regs *regs);
int submit_bio_wait_post_handler(struct kprobe *p, struct pt_regs *regs);

int sync_blockdev_pre_handler(struct kprobe *p, struct pt_regs *regs);
int sync_blockdev_post_handler(struct kprobe *p, struct pt_regs *regs);

int sync_dirty_buffer_pre_handler(struct kprobe *p, struct pt_regs *regs);
int sync_dirty_buffer_post_handler(struct kprobe *p, struct pt_regs *regs);

int sync_filesystem_pre_handler(struct kprobe *p, struct pt_regs *regs);
int sync_filesystem_post_handler(struct kprobe *p, struct pt_regs *regs);

int sync_inode_metadata_pre_handler(struct kprobe *p, struct pt_regs *regs);
int sync_inode_metadata_post_handler(struct kprobe *p, struct pt_regs *regs);

int sync_mapping_buffers_pre_handler(struct kprobe *p, struct pt_regs *regs);
int sync_mapping_buffers_post_handler(struct kprobe *p, struct pt_regs *regs);

int tag_pages_for_writeback_pre_handler(struct kprobe *p, struct pt_regs *regs);
int tag_pages_for_writeback_post_handler(struct kprobe *p, struct pt_regs *regs);

int thaw_bdev_pre_handler(struct kprobe *p, struct pt_regs *regs);
int thaw_bdev_post_handler(struct kprobe *p, struct pt_regs *regs);

int touch_atime_pre_handler(struct kprobe *p, struct pt_regs *regs);
int touch_atime_post_handler(struct kprobe *p, struct pt_regs *regs);

int truncate_inode_pages_pre_handler(struct kprobe *p, struct pt_regs *regs);
int truncate_inode_pages_post_handler(struct kprobe *p, struct pt_regs *regs);

int truncate_inode_pages_final_pre_handler(struct kprobe *p, struct pt_regs *regs);
int truncate_inode_pages_final_post_handler(struct kprobe *p, struct pt_regs *regs);

int truncate_pagecache_pre_handler(struct kprobe *p, struct pt_regs *regs);
int truncate_pagecache_post_handler(struct kprobe *p, struct pt_regs *regs);

int truncate_pagecache_range_pre_handler(struct kprobe *p, struct pt_regs *regs);
int truncate_pagecache_range_post_handler(struct kprobe *p, struct pt_regs *regs);

int try_to_free_buffers_pre_handler(struct kprobe *p, struct pt_regs *regs);
int try_to_free_buffers_post_handler(struct kprobe *p, struct pt_regs *regs);

int try_to_writeback_inodes_sb_pre_handler(struct kprobe *p, struct pt_regs *regs);
int try_to_writeback_inodes_sb_post_handler(struct kprobe *p, struct pt_regs *regs);

int unlock_buffer_pre_handler(struct kprobe *p, struct pt_regs *regs);
int unlock_buffer_post_handler(struct kprobe *p, struct pt_regs *regs);

int unlock_new_inode_pre_handler(struct kprobe *p, struct pt_regs *regs);
int unlock_new_inode_post_handler(struct kprobe *p, struct pt_regs *regs);

int unlock_two_nondirectories_pre_handler(struct kprobe *p, struct pt_regs *regs);
int unlock_two_nondirectories_post_handler(struct kprobe *p, struct pt_regs *regs);

int unregister_filesystem_pre_handler(struct kprobe *p, struct pt_regs *regs);
int unregister_filesystem_post_handler(struct kprobe *p, struct pt_regs *regs);

int vfs_fsync_range_pre_handler(struct kprobe *p, struct pt_regs *regs);
int vfs_fsync_range_post_handler(struct kprobe *p, struct pt_regs *regs);

int vfs_setpos_pre_handler(struct kprobe *p, struct pt_regs *regs);
int vfs_setpos_post_handler(struct kprobe *p, struct pt_regs *regs);


static struct kprobe I_BDEV_kp = {
    .symbol_name = "I_BDEV",
    .pre_handler = I_BDEV_pre_handler,
    .post_handler = I_BDEV_post_handler,
};

static struct kprobe __bdev_dax_supported_kp = {
    .symbol_name = "__bdev_dax_supported",
    .pre_handler = __bdev_dax_supported_pre_handler,
    .post_handler = __bdev_dax_supported_post_handler,
};

static struct kprobe __bforget_kp = {
    .symbol_name = "__bforget",
    .pre_handler = __bforget_pre_handler,
    .post_handler = __bforget_post_handler,
};

static struct kprobe __bio_add_page_kp = {
    .symbol_name = "__bio_add_page",
    .pre_handler = __bio_add_page_pre_handler,
    .post_handler = __bio_add_page_post_handler,
};

static struct kprobe __blkdev_issue_discard_kp = {
    .symbol_name = "__blkdev_issue_discard",
    .pre_handler = __blkdev_issue_discard_pre_handler,
    .post_handler = __blkdev_issue_discard_post_handler,
};

static struct kprobe __blkdev_issue_zeroout_kp = {
    .symbol_name = "__blkdev_issue_zeroout",
    .pre_handler = __blkdev_issue_zeroout_pre_handler,
    .post_handler = __blkdev_issue_zeroout_post_handler,
};

static struct kprobe __block_write_begin_kp = {
    .symbol_name = "__block_write_begin",
    .pre_handler = __block_write_begin_pre_handler,
    .post_handler = __block_write_begin_post_handler,
};

static struct kprobe __blockdev_direct_IO_kp = {
    .symbol_name = "__blockdev_direct_IO",
    .pre_handler = __blockdev_direct_IO_pre_handler,
    .post_handler = __blockdev_direct_IO_post_handler,
};

static struct kprobe __bread_gfp_kp = {
    .symbol_name = "__bread_gfp",
    .pre_handler = __bread_gfp_pre_handler,
    .post_handler = __bread_gfp_post_handler,
};

static struct kprobe __breadahead_gfp_kp = {
    .symbol_name = "__breadahead_gfp",
    .pre_handler = __breadahead_gfp_pre_handler,
    .post_handler = __breadahead_gfp_post_handler,
};

static struct kprobe __brelse_kp = {
    .symbol_name = "__brelse",
    .pre_handler = __brelse_pre_handler,
    .post_handler = __brelse_post_handler,
};

static struct kprobe __cleancache_get_page_kp = {
    .symbol_name = "__cleancache_get_page",
    .pre_handler = __cleancache_get_page_pre_handler,
    .post_handler = __cleancache_get_page_post_handler,
};

static struct kprobe __cleancache_init_fs_kp = {
    .symbol_name = "__cleancache_init_fs",
    .pre_handler = __cleancache_init_fs_pre_handler,
    .post_handler = __cleancache_init_fs_post_handler,
};

static struct kprobe __fdget_kp = {
    .symbol_name = "__fdget",
    .pre_handler = __fdget_pre_handler,
    .post_handler = __fdget_post_handler,
};

static struct kprobe __filemap_set_wb_err_kp = {
    .symbol_name = "__filemap_set_wb_err",
    .pre_handler = __filemap_set_wb_err_pre_handler,
    .post_handler = __filemap_set_wb_err_post_handler,
};

static struct kprobe __find_get_block_kp = {
    .symbol_name = "__find_get_block",
    .pre_handler = __find_get_block_pre_handler,
    .post_handler = __find_get_block_post_handler,
};

static struct kprobe __generic_file_fsync_kp = {
    .symbol_name = "__generic_file_fsync",
    .pre_handler = __generic_file_fsync_pre_handler,
    .post_handler = __generic_file_fsync_post_handler,
};

static struct kprobe __generic_file_write_iter_kp = {
    .symbol_name = "__generic_file_write_iter",
    .pre_handler = __generic_file_write_iter_pre_handler,
    .post_handler = __generic_file_write_iter_post_handler,
};

static struct kprobe __getblk_gfp_kp = {
    .symbol_name = "__getblk_gfp",
    .pre_handler = __getblk_gfp_pre_handler,
    .post_handler = __getblk_gfp_post_handler,
};

static struct kprobe __init_waitqueue_head_kp = {
    .symbol_name = "__init_waitqueue_head",
    .pre_handler = __init_waitqueue_head_pre_handler,
    .post_handler = __init_waitqueue_head_post_handler,
};

static struct kprobe __lock_buffer_kp = {
    .symbol_name = "__lock_buffer",
    .pre_handler = __lock_buffer_pre_handler,
    .post_handler = __lock_buffer_post_handler,
};

static struct kprobe __mark_inode_dirty_kp = {
    .symbol_name = "__mark_inode_dirty",
    .pre_handler = __mark_inode_dirty_pre_handler,
    .post_handler = __mark_inode_dirty_post_handler,
};

static struct kprobe __mb_cache_entry_free_kp = {
    .symbol_name = "__mb_cache_entry_free",
    .pre_handler = __mb_cache_entry_free_pre_handler,
    .post_handler = __mb_cache_entry_free_post_handler,
};

static struct kprobe __page_symlink_kp = {
    .symbol_name = "__page_symlink",
    .pre_handler = __page_symlink_pre_handler,
    .post_handler = __page_symlink_post_handler,
};

static struct kprobe __pagevec_release_kp = {
    .symbol_name = "__pagevec_release",
    .pre_handler = __pagevec_release_pre_handler,
    .post_handler = __pagevec_release_post_handler,
};

static struct kprobe __percpu_down_read_kp = {
    .symbol_name = "__percpu_down_read",
    .pre_handler = __percpu_down_read_pre_handler,
    .post_handler = __percpu_down_read_post_handler,
};

static struct kprobe __percpu_init_rwsem_kp = {
    .symbol_name = "__percpu_init_rwsem",
    .pre_handler = __percpu_init_rwsem_pre_handler,
    .post_handler = __percpu_init_rwsem_post_handler,
};

static struct kprobe __put_page_kp = {
    .symbol_name = "__put_page",
    .pre_handler = __put_page_pre_handler,
    .post_handler = __put_page_post_handler,
};

static struct kprobe __refrigerator_kp = {
    .symbol_name = "__refrigerator",
    .pre_handler = __refrigerator_pre_handler,
    .post_handler = __refrigerator_post_handler,
};

static struct kprobe __set_page_dirty_buffers_kp = {
    .symbol_name = "__set_page_dirty_buffers",
    .pre_handler = __set_page_dirty_buffers_pre_handler,
    .post_handler = __set_page_dirty_buffers_post_handler,
};

static struct kprobe __set_page_dirty_nobuffers_kp = {
    .symbol_name = "__set_page_dirty_nobuffers",
    .pre_handler = __set_page_dirty_nobuffers_pre_handler,
    .post_handler = __set_page_dirty_nobuffers_post_handler,
};

static struct kprobe __sync_dirty_buffer_kp = {
    .symbol_name = "__sync_dirty_buffer",
    .pre_handler = __sync_dirty_buffer_pre_handler,
    .post_handler = __sync_dirty_buffer_post_handler,
};

static struct kprobe __test_set_page_writeback_kp = {
    .symbol_name = "__test_set_page_writeback",
    .pre_handler = __test_set_page_writeback_pre_handler,
    .post_handler = __test_set_page_writeback_post_handler,
};

static struct kprobe __var_waitqueue_kp = {
    .symbol_name = "__var_waitqueue",
    .pre_handler = __var_waitqueue_pre_handler,
    .post_handler = __var_waitqueue_post_handler,
};

static struct kprobe __wait_on_buffer_kp = {
    .symbol_name = "__wait_on_buffer",
    .pre_handler = __wait_on_buffer_pre_handler,
    .post_handler = __wait_on_buffer_post_handler,
};

static struct kprobe __wake_up_kp = {
    .symbol_name = "__wake_up",
    .pre_handler = __wake_up_pre_handler,
    .post_handler = __wake_up_post_handler,
};

static struct kprobe __warn_printk_kp = {
    .symbol_name = "__warn_printk",
    .pre_handler = __warn_printk_pre_handler,
    .post_handler = __warn_printk_post_handler,
};

static struct kprobe add_to_page_cache_lru_kp = {
    .symbol_name = "add_to_page_cache_lru",
    .pre_handler = add_to_page_cache_lru_pre_handler,
    .post_handler = add_to_page_cache_lru_post_handler,
};

static struct kprobe bdev_read_only_kp = {
    .symbol_name = "bdev_read_only",
    .pre_handler = bdev_read_only_pre_handler,
    .post_handler = bdev_read_only_post_handler,
};

static struct kprobe bdevname_kp = {
    .symbol_name = "bdevname",
    .pre_handler = bdevname_pre_handler,
    .post_handler = bdevname_post_handler,
};

static struct kprobe bh_submit_read_kp = {
    .symbol_name = "bh_submit_read",
    .pre_handler = bh_submit_read_pre_handler,
    .post_handler = bh_submit_read_post_handler,
};

static struct kprobe bh_uptodate_or_lock_kp = {
    .symbol_name = "bh_uptodate_or_lock",
    .pre_handler = bh_uptodate_or_lock_pre_handler,
    .post_handler = bh_uptodate_or_lock_post_handler,
};

static struct kprobe bio_alloc_bioset_kp = {
    .symbol_name = "bio_alloc_bioset",
    .pre_handler = bio_alloc_bioset_pre_handler,
    .post_handler = bio_alloc_bioset_post_handler,
};

static struct kprobe bio_devname_kp = {
    .symbol_name = "bio_devname",
    .pre_handler = bio_devname_pre_handler,
    .post_handler = bio_devname_post_handler,
};

static struct kprobe bio_put_kp = {
    .symbol_name = "bio_put",
    .pre_handler = bio_put_pre_handler,
    .post_handler = bio_put_post_handler,
};

static struct kprobe blk_finish_plug_kp = {
    .symbol_name = "blk_finish_plug",
    .pre_handler = blk_finish_plug_pre_handler,
    .post_handler = blk_finish_plug_post_handler,
};

static struct kprobe blk_start_plug_kp = {
    .symbol_name = "blk_start_plug",
    .pre_handler = blk_start_plug_pre_handler,
    .post_handler = blk_start_plug_post_handler,
};

static struct kprobe blk_status_to_errno_kp = {
    .symbol_name = "blk_status_to_errno",
    .pre_handler = blk_status_to_errno_pre_handler,
    .post_handler = blk_status_to_errno_post_handler,
};

static struct kprobe blkdev_get_by_dev_kp = {
    .symbol_name = "blkdev_get_by_dev",
    .pre_handler = blkdev_get_by_dev_pre_handler,
    .post_handler = blkdev_get_by_dev_post_handler,
};

static struct kprobe blkdev_issue_discard_kp = {
    .symbol_name = "blkdev_issue_discard",
    .pre_handler = blkdev_issue_discard_pre_handler,
    .post_handler = blkdev_issue_discard_post_handler,
};

static struct kprobe blkdev_issue_flush_kp = {
    .symbol_name = "blkdev_issue_flush",
    .pre_handler = blkdev_issue_flush_pre_handler,
    .post_handler = blkdev_issue_flush_post_handler,
};

static struct kprobe blkdev_put_kp = {
    .symbol_name = "blkdev_put",
    .pre_handler = blkdev_put_pre_handler,
    .post_handler = blkdev_put_post_handler,
};

static struct kprobe block_commit_write_kp = {
    .symbol_name = "block_commit_write",
    .pre_handler = block_commit_write_pre_handler,
    .post_handler = block_commit_write_post_handler,
};

static struct kprobe block_invalidatepage_kp = {
    .symbol_name = "block_invalidatepage",
    .pre_handler = block_invalidatepage_pre_handler,
    .post_handler = block_invalidatepage_post_handler,
};

static struct kprobe block_page_mkwrite_kp = {
    .symbol_name = "block_page_mkwrite",
    .pre_handler = block_page_mkwrite_pre_handler,
    .post_handler = block_page_mkwrite_post_handler,
};

static struct kprobe block_read_full_page_kp = {
    .symbol_name = "block_read_full_page",
    .pre_handler = block_read_full_page_pre_handler,
    .post_handler = block_read_full_page_post_handler,
};

static struct kprobe block_write_end_kp = {
    .symbol_name = "block_write_end",
    .pre_handler = block_write_end_pre_handler,
    .post_handler = block_write_end_post_handler,
};

static struct kprobe capable_kp = {
    .symbol_name = "capable",
    .pre_handler = capable_pre_handler,
    .post_handler = capable_post_handler,
};

static struct kprobe clean_bdev_aliases_kp = {
    .symbol_name = "clean_bdev_aliases",
    .pre_handler = clean_bdev_aliases_pre_handler,
    .post_handler = clean_bdev_aliases_post_handler,
};

static struct kprobe clear_inode_kp = {
    .symbol_name = "clear_inode",
    .pre_handler = clear_inode_pre_handler,
    .post_handler = clear_inode_post_handler,
};

static struct kprobe clear_nlink_kp = {
    .symbol_name = "clear_nlink",
    .pre_handler = clear_nlink_pre_handler,
    .post_handler = clear_nlink_post_handler,
};

static struct kprobe clear_page_dirty_for_io_kp = {
    .symbol_name = "clear_page_dirty_for_io",
    .pre_handler = clear_page_dirty_for_io_pre_handler,
    .post_handler = clear_page_dirty_for_io_post_handler,
};

static struct kprobe create_empty_buffers_kp = {
    .symbol_name = "create_empty_buffers",
    .pre_handler = create_empty_buffers_pre_handler,
    .post_handler = create_empty_buffers_post_handler,
};

static struct kprobe crypto_alloc_shash_kp = {
    .symbol_name = "crypto_alloc_shash",
    .pre_handler = crypto_alloc_shash_pre_handler,
    .post_handler = crypto_alloc_shash_post_handler,
};

static struct kprobe crypto_destroy_tfm_kp = {
    .symbol_name = "crypto_destroy_tfm",
    .pre_handler = crypto_destroy_tfm_pre_handler,
    .post_handler = crypto_destroy_tfm_post_handler,
};

static struct kprobe crypto_shash_update_kp = {
    .symbol_name = "crypto_shash_update",
    .pre_handler = crypto_shash_update_pre_handler,
    .post_handler = crypto_shash_update_post_handler,
};

static struct kprobe current_time_kp = {
    .symbol_name = "current_time",
    .pre_handler = current_time_pre_handler,
    .post_handler = current_time_post_handler,
};

static struct kprobe d_find_any_alias_kp = {
    .symbol_name = "d_find_any_alias",
    .pre_handler = d_find_any_alias_pre_handler,
    .post_handler = d_find_any_alias_post_handler,
};

static struct kprobe d_instantiate_kp = {
    .symbol_name = "d_instantiate",
    .pre_handler = d_instantiate_pre_handler,
    .post_handler = d_instantiate_post_handler,
};

static struct kprobe d_instantiate_new_kp = {
    .symbol_name = "d_instantiate_new",
    .pre_handler = d_instantiate_new_pre_handler,
    .post_handler = d_instantiate_new_post_handler,
};

static struct kprobe d_make_root_kp = {
    .symbol_name = "d_make_root",
    .pre_handler = d_make_root_pre_handler,
    .post_handler = d_make_root_post_handler,
};

static struct kprobe d_obtain_alias_kp = {
    .symbol_name = "d_obtain_alias",
    .pre_handler = d_obtain_alias_pre_handler,
    .post_handler = d_obtain_alias_post_handler,
};

static struct kprobe d_path_kp = {
    .symbol_name = "d_path",
    .pre_handler = d_path_pre_handler,
    .post_handler = d_path_post_handler,
};

static struct kprobe d_splice_alias_kp = {
    .symbol_name = "d_splice_alias",
    .pre_handler = d_splice_alias_pre_handler,
    .post_handler = d_splice_alias_post_handler,
};

static struct kprobe d_tmpfile_kp = {
    .symbol_name = "d_tmpfile",
    .pre_handler = d_tmpfile_pre_handler,
    .post_handler = d_tmpfile_post_handler,
};

static struct kprobe dax_finish_sync_fault_kp = {
    .symbol_name = "dax_finish_sync_fault",
    .pre_handler = dax_finish_sync_fault_pre_handler,
    .post_handler = dax_finish_sync_fault_post_handler,
};

static struct kprobe dax_iomap_fault_kp = {
    .symbol_name = "dax_iomap_fault",
    .pre_handler = dax_iomap_fault_pre_handler,
    .post_handler = dax_iomap_fault_post_handler,
};

static struct kprobe dax_iomap_rw_kp = {
    .symbol_name = "dax_iomap_rw",
    .pre_handler = dax_iomap_rw_pre_handler,
    .post_handler = dax_iomap_rw_post_handler,
};

static struct kprobe dax_layout_busy_page_kp = {
    .symbol_name = "dax_layout_busy_page",
    .pre_handler = dax_layout_busy_page_pre_handler,
    .post_handler = dax_layout_busy_page_post_handler,
};

static struct kprobe dax_writeback_mapping_range_kp = {
    .symbol_name = "dax_writeback_mapping_range",
    .pre_handler = dax_writeback_mapping_range_pre_handler,
    .post_handler = dax_writeback_mapping_range_post_handler,
};

static struct kprobe del_timer_sync_kp = {
    .symbol_name = "del_timer_sync",
    .pre_handler = del_timer_sync_pre_handler,
    .post_handler = del_timer_sync_post_handler,
};

static struct kprobe destroy_workqueue_kp = {
    .symbol_name = "destroy_workqueue",
    .pre_handler = destroy_workqueue_pre_handler,
    .post_handler = destroy_workqueue_post_handler,
};

static struct kprobe dget_parent_kp = {
    .symbol_name = "dget_parent",
    .pre_handler = dget_parent_pre_handler,
    .post_handler = dget_parent_post_handler,
};

static struct kprobe dput_kp = {
    .symbol_name = "dput",
    .pre_handler = dput_pre_handler,
    .post_handler = dput_post_handler,
};

static struct kprobe drop_nlink_kp = {
    .symbol_name = "drop_nlink",
    .pre_handler = drop_nlink_pre_handler,
    .post_handler = drop_nlink_post_handler,
};

static struct kprobe dump_page_kp = {
    .symbol_name = "dump_page",
    .pre_handler = dump_page_pre_handler,
    .post_handler = dump_page_post_handler,
};

static struct kprobe end_page_writeback_kp = {
    .symbol_name = "end_page_writeback",
    .pre_handler = end_page_writeback_pre_handler,
    .post_handler = end_page_writeback_post_handler,
};

static struct kprobe fiemap_fill_next_extent_kp = {
    .symbol_name = "fiemap_fill_next_extent",
    .pre_handler = fiemap_fill_next_extent_pre_handler,
    .post_handler = fiemap_fill_next_extent_post_handler,
};

static struct kprobe file_check_and_advance_wb_err_kp = {
    .symbol_name = "file_check_and_advance_wb_err",
    .pre_handler = file_check_and_advance_wb_err_pre_handler,
    .post_handler = file_check_and_advance_wb_err_post_handler,
};

static struct kprobe file_path_kp = {
    .symbol_name = "file_path",
    .pre_handler = file_path_pre_handler,
    .post_handler = file_path_post_handler,
};

static struct kprobe file_remove_privs_kp = {
    .symbol_name = "file_remove_privs",
    .pre_handler = file_remove_privs_pre_handler,
    .post_handler = file_remove_privs_post_handler,
};

static struct kprobe file_update_time_kp = {
    .symbol_name = "file_update_time",
    .pre_handler = file_update_time_pre_handler,
    .post_handler = file_update_time_post_handler,
};

static struct kprobe file_write_and_wait_range_kp = {
    .symbol_name = "file_write_and_wait_range",
    .pre_handler = file_write_and_wait_range_pre_handler,
    .post_handler = file_write_and_wait_range_post_handler,
};

static struct kprobe filemap_fault_kp = {
    .symbol_name = "filemap_fault",
    .pre_handler = filemap_fault_pre_handler,
    .post_handler = filemap_fault_post_handler,
};

static struct kprobe filemap_flush_kp = {
    .symbol_name = "filemap_flush",
    .pre_handler = filemap_flush_pre_handler,
    .post_handler = filemap_flush_post_handler,
};

static struct kprobe filemap_write_and_wait_range_kp = {
    .symbol_name = "filemap_write_and_wait_range",
    .pre_handler = filemap_write_and_wait_range_pre_handler,
    .post_handler = filemap_write_and_wait_range_post_handler,
};

static struct kprobe find_inode_nowait_kp = {
    .symbol_name = "find_inode_nowait",
    .pre_handler = find_inode_nowait_pre_handler,
    .post_handler = find_inode_nowait_post_handler,
};

static struct kprobe flush_workqueue_kp = {
    .symbol_name = "flush_workqueue",
    .pre_handler = flush_workqueue_pre_handler,
    .post_handler = flush_workqueue_post_handler,
};

static struct kprobe fput_kp = {
    .symbol_name = "fput",
    .pre_handler = fput_pre_handler,
    .post_handler = fput_post_handler,
};

static struct kprobe freeze_bdev_kp = {
    .symbol_name = "freeze_bdev",
    .pre_handler = freeze_bdev_pre_handler,
    .post_handler = freeze_bdev_post_handler,
};

static struct kprobe freezing_slow_path_kp = {
    .symbol_name = "freezing_slow_path",
    .pre_handler = freezing_slow_path_pre_handler,
    .post_handler = freezing_slow_path_post_handler,
};

static struct kprobe from_kgid_kp = {
    .symbol_name = "from_kgid",
    .pre_handler = from_kgid_pre_handler,
    .post_handler = from_kgid_post_handler,
};

static struct kprobe from_kgid_munged_kp = {
    .symbol_name = "from_kgid_munged",
    .pre_handler = from_kgid_munged_pre_handler,
    .post_handler = from_kgid_munged_post_handler,
};

static struct kprobe from_kprojid_kp = {
    .symbol_name = "from_kprojid",
    .pre_handler = from_kprojid_pre_handler,
    .post_handler = from_kprojid_post_handler,
};

static struct kprobe fs_dax_get_by_bdev_kp = {
    .symbol_name = "fs_dax_get_by_bdev",
    .pre_handler = fs_dax_get_by_bdev_pre_handler,
    .post_handler = fs_dax_get_by_bdev_post_handler,
};

static struct kprobe generic_block_bmap_kp = {
    .symbol_name = "generic_block_bmap",
    .pre_handler = generic_block_bmap_pre_handler,
    .post_handler = generic_block_bmap_post_handler,
};

static struct kprobe generic_block_fiemap_kp = {
    .symbol_name = "generic_block_fiemap",
    .pre_handler = generic_block_fiemap_pre_handler,
    .post_handler = generic_block_fiemap_post_handler,
};

static struct kprobe generic_check_addressable_kp = {
    .symbol_name = "generic_check_addressable",
    .pre_handler = generic_check_addressable_pre_handler,
    .post_handler = generic_check_addressable_post_handler,
};

static struct kprobe generic_fh_to_dentry_kp = {
    .symbol_name = "generic_fh_to_dentry",
    .pre_handler = generic_fh_to_dentry_pre_handler,
    .post_handler = generic_fh_to_dentry_post_handler,
};

static struct kprobe generic_fh_to_parent_kp = {
    .symbol_name = "generic_fh_to_parent",
    .pre_handler = generic_fh_to_parent_pre_handler,
    .post_handler = generic_fh_to_parent_post_handler,
};

static struct kprobe generic_file_llseek_size_kp = {
    .symbol_name = "generic_file_llseek_size",
    .pre_handler = generic_file_llseek_size_pre_handler,
    .post_handler = generic_file_llseek_size_post_handler,
};

static struct kprobe generic_file_read_iter_kp = {
    .symbol_name = "generic_file_read_iter",
    .pre_handler = generic_file_read_iter_pre_handler,
    .post_handler = generic_file_read_iter_post_handler,
};

static struct kprobe generic_fillattr_kp = {
    .symbol_name = "generic_fillattr",
    .pre_handler = generic_fillattr_pre_handler,
    .post_handler = generic_fillattr_post_handler,
};

static struct kprobe generic_write_end_kp = {
    .symbol_name = "generic_write_end",
    .pre_handler = generic_write_end_pre_handler,
    .post_handler = generic_write_end_post_handler,
};

static struct kprobe generic_writepages_kp = {
    .symbol_name = "generic_writepages",
    .pre_handler = generic_writepages_pre_handler,
    .post_handler = generic_writepages_post_handler,
};

static struct kprobe get_acl_kp = {
    .symbol_name = "get_acl",
    .pre_handler = get_acl_pre_handler,
    .post_handler = get_acl_post_handler,
};

static struct kprobe grab_cache_page_write_begin_kp = {
    .symbol_name = "grab_cache_page_write_begin",
    .pre_handler = grab_cache_page_write_begin_pre_handler,
    .post_handler = grab_cache_page_write_begin_post_handler,
};

static struct kprobe iget_failed_kp = {
    .symbol_name = "iget_failed",
    .pre_handler = iget_failed_pre_handler,
    .post_handler = iget_failed_post_handler,
};

static struct kprobe iget_locked_kp = {
    .symbol_name = "iget_locked",
    .pre_handler = iget_locked_pre_handler,
    .post_handler = iget_locked_post_handler,
};

static struct kprobe igrab_kp = {
    .symbol_name = "igrab",
    .pre_handler = igrab_pre_handler,
    .post_handler = igrab_post_handler,
};

static struct kprobe ihold_kp = {
    .symbol_name = "ihold",
    .pre_handler = ihold_pre_handler,
    .post_handler = ihold_post_handler,
};

static struct kprobe in_group_p_kp = {
    .symbol_name = "in_group_p",
    .pre_handler = in_group_p_pre_handler,
    .post_handler = in_group_p_post_handler,
};

static struct kprobe inc_nlink_kp = {
    .symbol_name = "inc_nlink",
    .pre_handler = inc_nlink_pre_handler,
    .post_handler = inc_nlink_post_handler,
};

static struct kprobe init_special_inode_kp = {
    .symbol_name = "init_special_inode",
    .pre_handler = init_special_inode_pre_handler,
    .post_handler = init_special_inode_post_handler,
};

static struct kprobe init_timer_key_kp = {
    .symbol_name = "init_timer_key",
    .pre_handler = init_timer_key_pre_handler,
    .post_handler = init_timer_key_post_handler,
};

static struct kprobe init_wait_entry_kp = {
    .symbol_name = "init_wait_entry",
    .pre_handler = init_wait_entry_pre_handler,
    .post_handler = init_wait_entry_post_handler,
};

static struct kprobe init_wait_var_entry_kp = {
    .symbol_name = "init_wait_var_entry",
    .pre_handler = init_wait_var_entry_pre_handler,
    .post_handler = init_wait_var_entry_post_handler,
};

static struct kprobe inode_dio_wait_kp = {
    .symbol_name = "inode_dio_wait",
    .pre_handler = inode_dio_wait_pre_handler,
    .post_handler = inode_dio_wait_post_handler,
};

static struct kprobe inode_init_once_kp = {
    .symbol_name = "inode_init_once",
    .pre_handler = inode_init_once_pre_handler,
    .post_handler = inode_init_once_post_handler,
};

static struct kprobe inode_init_owner_kp = {
    .symbol_name = "inode_init_owner",
    .pre_handler = inode_init_owner_pre_handler,
    .post_handler = inode_init_owner_post_handler,
};

static struct kprobe inode_needs_sync_kp = {
    .symbol_name = "inode_needs_sync",
    .pre_handler = inode_needs_sync_pre_handler,
    .post_handler = inode_needs_sync_post_handler,
};

static struct kprobe inode_newsize_ok_kp = {
    .symbol_name = "inode_newsize_ok",
    .pre_handler = inode_newsize_ok_pre_handler,
    .post_handler = inode_newsize_ok_post_handler,
};

static struct kprobe inode_nohighmem_kp = {
    .symbol_name = "inode_nohighmem",
    .pre_handler = inode_nohighmem_pre_handler,
    .post_handler = inode_nohighmem_post_handler,
};

static struct kprobe inode_owner_or_capable_kp = {
    .symbol_name = "inode_owner_or_capable",
    .pre_handler = inode_owner_or_capable_pre_handler,
    .post_handler = inode_owner_or_capable_post_handler,
};

static struct kprobe inode_set_flags_kp = {
    .symbol_name = "inode_set_flags",
    .pre_handler = inode_set_flags_pre_handler,
    .post_handler = inode_set_flags_post_handler,
};

static struct kprobe insert_inode_locked_kp = {
    .symbol_name = "insert_inode_locked",
    .pre_handler = insert_inode_locked_pre_handler,
    .post_handler = insert_inode_locked_post_handler,
};

static struct kprobe invalidate_bdev_kp = {
    .symbol_name = "invalidate_bdev",
    .pre_handler = invalidate_bdev_pre_handler,
    .post_handler = invalidate_bdev_post_handler,
};

static struct kprobe invalidate_inode_buffers_kp = {
    .symbol_name = "invalidate_inode_buffers",
    .pre_handler = invalidate_inode_buffers_pre_handler,
    .post_handler = invalidate_inode_buffers_post_handler,
};

static struct kprobe iomap_seek_data_kp = {
    .symbol_name = "iomap_seek_data",
    .pre_handler = iomap_seek_data_pre_handler,
    .post_handler = iomap_seek_data_post_handler,
};

static struct kprobe iomap_seek_hole_kp = {
    .symbol_name = "iomap_seek_hole",
    .pre_handler = iomap_seek_hole_pre_handler,
    .post_handler = iomap_seek_hole_post_handler,
};

static struct kprobe iomap_zero_range_kp = {
    .symbol_name = "iomap_zero_range",
    .pre_handler = iomap_zero_range_pre_handler,
    .post_handler = iomap_zero_range_post_handler,
};

static struct kprobe iput_kp = {
    .symbol_name = "iput",
    .pre_handler = iput_pre_handler,
    .post_handler = iput_post_handler,
};

static struct kprobe is_bad_inode_kp = {
    .symbol_name = "is_bad_inode",
    .pre_handler = is_bad_inode_pre_handler,
    .post_handler = is_bad_inode_post_handler,
};

static struct kprobe kern_path_kp = {
    .symbol_name = "kern_path",
    .pre_handler = kern_path_pre_handler,
    .post_handler = kern_path_post_handler,
};

static struct kprobe kstrdup_kp = {
    .symbol_name = "kstrdup",
    .pre_handler = kstrdup_pre_handler,
    .post_handler = kstrdup_post_handler,
};

static struct kprobe kstrndup_kp = {
    .symbol_name = "kstrndup",
    .pre_handler = kstrndup_pre_handler,
    .post_handler = kstrndup_post_handler,
};

static struct kprobe kthread_create_on_node_kp = {
    .symbol_name = "kthread_create_on_node",
    .pre_handler = kthread_create_on_node_pre_handler,
    .post_handler = kthread_create_on_node_post_handler,
};

static struct kprobe kthread_should_stop_kp = {
    .symbol_name = "kthread_should_stop",
    .pre_handler = kthread_should_stop_pre_handler,
    .post_handler = kthread_should_stop_post_handler,
};

static struct kprobe kthread_stop_kp = {
    .symbol_name = "kthread_stop",
    .pre_handler = kthread_stop_pre_handler,
    .post_handler = kthread_stop_post_handler,
};

static struct kprobe ktime_get_kp = {
    .symbol_name = "ktime_get",
    .pre_handler = ktime_get_pre_handler,
    .post_handler = ktime_get_post_handler,
};

static struct kprobe ktime_get_real_seconds_kp = {
    .symbol_name = "ktime_get_real_seconds",
    .pre_handler = ktime_get_real_seconds_pre_handler,
    .post_handler = ktime_get_real_seconds_post_handler,
};

static struct kprobe ktime_get_with_offset_kp = {
    .symbol_name = "ktime_get_with_offset",
    .pre_handler = ktime_get_with_offset_pre_handler,
    .post_handler = ktime_get_with_offset_post_handler,
};

static struct kprobe ll_rw_block_kp = {
    .symbol_name = "ll_rw_block",
    .pre_handler = ll_rw_block_pre_handler,
    .post_handler = ll_rw_block_post_handler,
};

static struct kprobe lock_two_nondirectories_kp = {
    .symbol_name = "lock_two_nondirectories",
    .pre_handler = lock_two_nondirectories_pre_handler,
    .post_handler = lock_two_nondirectories_post_handler,
};

static struct kprobe make_bad_inode_kp = {
    .symbol_name = "make_bad_inode",
    .pre_handler = make_bad_inode_pre_handler,
    .post_handler = make_bad_inode_post_handler,
};

static struct kprobe make_kgid_kp = {
    .symbol_name = "make_kgid",
    .pre_handler = make_kgid_pre_handler,
    .post_handler = make_kgid_post_handler,
};

static struct kprobe make_kprojid_kp = {
    .symbol_name = "make_kprojid",
    .pre_handler = make_kprojid_pre_handler,
    .post_handler = make_kprojid_post_handler,
};

static struct kprobe make_kuid_kp = {
    .symbol_name = "make_kuid",
    .pre_handler = make_kuid_pre_handler,
    .post_handler = make_kuid_post_handler,
};

static struct kprobe mark_buffer_dirty_kp = {
    .symbol_name = "mark_buffer_dirty",
    .pre_handler = mark_buffer_dirty_pre_handler,
    .post_handler = mark_buffer_dirty_post_handler,
};

static struct kprobe mark_buffer_dirty_inode_kp = {
    .symbol_name = "mark_buffer_dirty_inode",
    .pre_handler = mark_buffer_dirty_inode_pre_handler,
    .post_handler = mark_buffer_dirty_inode_post_handler,
};

static struct kprobe mb_cache_create_kp = {
    .symbol_name = "mb_cache_create",
    .pre_handler = mb_cache_create_pre_handler,
    .post_handler = mb_cache_create_post_handler,
};

static struct kprobe mb_cache_destroy_kp = {
    .symbol_name = "mb_cache_destroy",
    .pre_handler = mb_cache_destroy_pre_handler,
    .post_handler = mb_cache_destroy_post_handler,
};

static struct kprobe mb_cache_entry_create_kp = {
    .symbol_name = "mb_cache_entry_create",
    .pre_handler = mb_cache_entry_create_pre_handler,
    .post_handler = mb_cache_entry_create_post_handler,
};

static struct kprobe mb_cache_entry_delete_kp = {
    .symbol_name = "mb_cache_entry_delete",
    .pre_handler = mb_cache_entry_delete_pre_handler,
    .post_handler = mb_cache_entry_delete_post_handler,
};

static struct kprobe mb_cache_entry_find_first_kp = {
    .symbol_name = "mb_cache_entry_find_first",
    .pre_handler = mb_cache_entry_find_first_pre_handler,
    .post_handler = mb_cache_entry_find_first_post_handler,
};

static struct kprobe mb_cache_entry_find_next_kp = {
    .symbol_name = "mb_cache_entry_find_next",
    .pre_handler = mb_cache_entry_find_next_pre_handler,
    .post_handler = mb_cache_entry_find_next_post_handler,
};

static struct kprobe mb_cache_entry_get_kp = {
    .symbol_name = "mb_cache_entry_get",
    .pre_handler = mb_cache_entry_get_pre_handler,
    .post_handler = mb_cache_entry_get_post_handler,
};

static struct kprobe mb_cache_entry_touch_kp = {
    .symbol_name = "mb_cache_entry_touch",
    .pre_handler = mb_cache_entry_touch_pre_handler,
    .post_handler = mb_cache_entry_touch_post_handler,
};

static struct kprobe mnt_drop_write_file_kp = {
    .symbol_name = "mnt_drop_write_file",
    .pre_handler = mnt_drop_write_file_pre_handler,
    .post_handler = mnt_drop_write_file_post_handler,
};

static struct kprobe mnt_want_write_file_kp = {
    .symbol_name = "mnt_want_write_file",
    .pre_handler = mnt_want_write_file_pre_handler,
    .post_handler = mnt_want_write_file_post_handler,
};

static struct kprobe mod_timer_kp = {
    .symbol_name = "mod_timer",
    .pre_handler = mod_timer_pre_handler,
    .post_handler = mod_timer_post_handler,
};

static struct kprobe mount_bdev_kp = {
    .symbol_name = "mount_bdev",
    .pre_handler = mount_bdev_pre_handler,
    .post_handler = mount_bdev_post_handler,
};

static struct kprobe new_inode_kp = {
    .symbol_name = "new_inode",
    .pre_handler = new_inode_pre_handler,
    .post_handler = new_inode_post_handler,
};

static struct kprobe page_mapped_kp = {
    .symbol_name = "page_mapped",
    .pre_handler = page_mapped_pre_handler,
    .post_handler = page_mapped_post_handler,
};

static struct kprobe page_zero_new_buffers_kp = {
    .symbol_name = "page_zero_new_buffers",
    .pre_handler = page_zero_new_buffers_pre_handler,
    .post_handler = page_zero_new_buffers_post_handler,
};

static struct kprobe pagecache_get_page_kp = {
    .symbol_name = "pagecache_get_page",
    .pre_handler = pagecache_get_page_pre_handler,
    .post_handler = pagecache_get_page_post_handler,
};

static struct kprobe pagecache_isize_extended_kp = {
    .symbol_name = "pagecache_isize_extended",
    .pre_handler = pagecache_isize_extended_pre_handler,
    .post_handler = pagecache_isize_extended_post_handler,
};

static struct kprobe pagevec_lookup_range_kp = {
    .symbol_name = "pagevec_lookup_range",
    .pre_handler = pagevec_lookup_range_pre_handler,
    .post_handler = pagevec_lookup_range_post_handler,
};

static struct kprobe parse_options_kp = {
    .symbol_name = "parse_options",
    .pre_handler = parse_options_pre_handler,
    .post_handler = parse_options_post_handler,
};

static struct kprobe path_put_kp = {
    .symbol_name = "path_put",
    .pre_handler = path_put_pre_handler,
    .post_handler = path_put_post_handler,
};

static struct kprobe percpu_down_write_kp = {
    .symbol_name = "percpu_down_write",
    .pre_handler = percpu_down_write_pre_handler,
    .post_handler = percpu_down_write_post_handler,
};

static struct kprobe percpu_free_rwsem_kp = {
    .symbol_name = "percpu_free_rwsem",
    .pre_handler = percpu_free_rwsem_pre_handler,
    .post_handler = percpu_free_rwsem_post_handler,
};

static struct kprobe percpu_up_write_kp = {
    .symbol_name = "percpu_up_write",
    .pre_handler = percpu_up_write_pre_handler,
    .post_handler = percpu_up_write_post_handler,
};

static struct kprobe posix_acl_alloc_kp = {
    .symbol_name = "posix_acl_alloc",
    .pre_handler = posix_acl_alloc_pre_handler,
    .post_handler = posix_acl_alloc_post_handler,
};

static struct kprobe posix_acl_chmod_kp = {
    .symbol_name = "posix_acl_chmod",
    .pre_handler = posix_acl_chmod_pre_handler,
    .post_handler = posix_acl_chmod_post_handler,
};

static struct kprobe posix_acl_create_kp = {
    .symbol_name = "posix_acl_create",
    .pre_handler = posix_acl_create_pre_handler,
    .post_handler = posix_acl_create_post_handler,
};

static struct kprobe posix_acl_update_mode_kp = {
    .symbol_name = "posix_acl_update_mode",
    .pre_handler = posix_acl_update_mode_pre_handler,
    .post_handler = posix_acl_update_mode_post_handler,
};

static struct kprobe prepare_to_wait_event_kp = {
    .symbol_name = "prepare_to_wait_event",
    .pre_handler = prepare_to_wait_event_pre_handler,
    .post_handler = prepare_to_wait_event_post_handler,
};

static struct kprobe printk_kp = {
    .symbol_name = "printk",
    .pre_handler = printk_pre_handler,
    .post_handler = printk_post_handler,
};

static struct kprobe put_dax_kp = {
    .symbol_name = "put_dax",
    .pre_handler = put_dax_pre_handler,
    .post_handler = put_dax_post_handler,
};

static struct kprobe queue_work_on_kp = {
    .symbol_name = "queue_work_on",
    .pre_handler = queue_work_on_pre_handler,
    .post_handler = queue_work_on_post_handler,
};

static struct kprobe read_cache_pages_kp = {
    .symbol_name = "read_cache_pages",
    .pre_handler = read_cache_pages_pre_handler,
    .post_handler = read_cache_pages_post_handler,
};

static struct kprobe redirty_page_for_writepage_kp = {
    .symbol_name = "redirty_page_for_writepage",
    .pre_handler = redirty_page_for_writepage_pre_handler,
    .post_handler = redirty_page_for_writepage_post_handler,
};

static struct kprobe register_filesystem_kp = {
    .symbol_name = "register_filesystem",
    .pre_handler = register_filesystem_pre_handler,
    .post_handler = register_filesystem_post_handler,
};

static struct kprobe register_shrinker_kp = {
    .symbol_name = "register_shrinker",
    .pre_handler = register_shrinker_pre_handler,
    .post_handler = register_shrinker_post_handler,
};

static struct kprobe sb_min_blocksize_kp = {
    .symbol_name = "sb_min_blocksize",
    .pre_handler = sb_min_blocksize_pre_handler,
    .post_handler = sb_min_blocksize_post_handler,
};

static struct kprobe sb_set_blocksize_kp = {
    .symbol_name = "sb_set_blocksize",
    .pre_handler = sb_set_blocksize_pre_handler,
    .post_handler = sb_set_blocksize_post_handler,
};

static struct kprobe seq_escape_kp = {
    .symbol_name = "seq_escape",
    .pre_handler = seq_escape_pre_handler,
    .post_handler = seq_escape_post_handler,
};

static struct kprobe seq_printf_kp = {
    .symbol_name = "seq_printf",
    .pre_handler = seq_printf_pre_handler,
    .post_handler = seq_printf_post_handler,
};

static struct kprobe seq_putc_kp = {
    .symbol_name = "seq_putc",
    .pre_handler = seq_putc_pre_handler,
    .post_handler = seq_putc_post_handler,
};

static struct kprobe seq_puts_kp = {
    .symbol_name = "seq_puts",
    .pre_handler = seq_puts_pre_handler,
    .post_handler = seq_puts_post_handler,
};

static struct kprobe set_blocksize_kp = {
    .symbol_name = "set_blocksize",
    .pre_handler = set_blocksize_pre_handler,
    .post_handler = set_blocksize_post_handler,
};

static struct kprobe set_cached_acl_kp = {
    .symbol_name = "set_cached_acl",
    .pre_handler = set_cached_acl_pre_handler,
    .post_handler = set_cached_acl_post_handler,
};

static struct kprobe set_nlink_kp = {
    .symbol_name = "set_nlink",
    .pre_handler = set_nlink_pre_handler,
    .post_handler = set_nlink_post_handler,
};

static struct kprobe set_task_ioprio_kp = {
    .symbol_name = "set_task_ioprio",
    .pre_handler = set_task_ioprio_pre_handler,
    .post_handler = set_task_ioprio_post_handler,
};

static struct kprobe setattr_copy_kp = {
    .symbol_name = "setattr_copy",
    .pre_handler = setattr_copy_pre_handler,
    .post_handler = setattr_copy_post_handler,
};

static struct kprobe setattr_prepare_kp = {
    .symbol_name = "setattr_prepare",
    .pre_handler = setattr_prepare_pre_handler,
    .post_handler = setattr_prepare_post_handler,
};

static struct kprobe submit_bh_kp = {
    .symbol_name = "submit_bh",
    .pre_handler = submit_bh_pre_handler,
    .post_handler = submit_bh_post_handler,
};

static struct kprobe submit_bio_kp = {
    .symbol_name = "submit_bio",
    .pre_handler = submit_bio_pre_handler,
    .post_handler = submit_bio_post_handler,
};

static struct kprobe submit_bio_wait_kp = {
    .symbol_name = "submit_bio_wait",
    .pre_handler = submit_bio_wait_pre_handler,
    .post_handler = submit_bio_wait_post_handler,
};

static struct kprobe sync_blockdev_kp = {
    .symbol_name = "sync_blockdev",
    .pre_handler = sync_blockdev_pre_handler,
    .post_handler = sync_blockdev_post_handler,
};

static struct kprobe sync_dirty_buffer_kp = {
    .symbol_name = "sync_dirty_buffer",
    .pre_handler = sync_dirty_buffer_pre_handler,
    .post_handler = sync_dirty_buffer_post_handler,
};

static struct kprobe sync_filesystem_kp = {
    .symbol_name = "sync_filesystem",
    .pre_handler = sync_filesystem_pre_handler,
    .post_handler = sync_filesystem_post_handler,
};

static struct kprobe sync_inode_metadata_kp = {
    .symbol_name = "sync_inode_metadata",
    .pre_handler = sync_inode_metadata_pre_handler,
    .post_handler = sync_inode_metadata_post_handler,
};

static struct kprobe sync_mapping_buffers_kp = {
    .symbol_name = "sync_mapping_buffers",
    .pre_handler = sync_mapping_buffers_pre_handler,
    .post_handler = sync_mapping_buffers_post_handler,
};

static struct kprobe tag_pages_for_writeback_kp = {
    .symbol_name = "tag_pages_for_writeback",
    .pre_handler = tag_pages_for_writeback_pre_handler,
    .post_handler = tag_pages_for_writeback_post_handler,
};

static struct kprobe thaw_bdev_kp = {
    .symbol_name = "thaw_bdev",
    .pre_handler = thaw_bdev_pre_handler,
    .post_handler = thaw_bdev_post_handler,
};

static struct kprobe touch_atime_kp = {
    .symbol_name = "touch_atime",
    .pre_handler = touch_atime_pre_handler,
    .post_handler = touch_atime_post_handler,
};

static struct kprobe truncate_inode_pages_kp = {
    .symbol_name = "truncate_inode_pages",
    .pre_handler = truncate_inode_pages_pre_handler,
    .post_handler = truncate_inode_pages_post_handler,
};

static struct kprobe truncate_inode_pages_final_kp = {
    .symbol_name = "truncate_inode_pages_final",
    .pre_handler = truncate_inode_pages_final_pre_handler,
    .post_handler = truncate_inode_pages_final_post_handler,
};

static struct kprobe truncate_pagecache_kp = {
    .symbol_name = "truncate_pagecache",
    .pre_handler = truncate_pagecache_pre_handler,
    .post_handler = truncate_pagecache_post_handler,
};

static struct kprobe truncate_pagecache_range_kp = {
    .symbol_name = "truncate_pagecache_range",
    .pre_handler = truncate_pagecache_range_pre_handler,
    .post_handler = truncate_pagecache_range_post_handler,
};

static struct kprobe try_to_free_buffers_kp = {
    .symbol_name = "try_to_free_buffers",
    .pre_handler = try_to_free_buffers_pre_handler,
    .post_handler = try_to_free_buffers_post_handler,
};

static struct kprobe try_to_writeback_inodes_sb_kp = {
    .symbol_name = "try_to_writeback_inodes_sb",
    .pre_handler = try_to_writeback_inodes_sb_pre_handler,
    .post_handler = try_to_writeback_inodes_sb_post_handler,
};

static struct kprobe unlock_buffer_kp = {
    .symbol_name = "unlock_buffer",
    .pre_handler = unlock_buffer_pre_handler,
    .post_handler = unlock_buffer_post_handler,
};

static struct kprobe unlock_new_inode_kp = {
    .symbol_name = "unlock_new_inode",
    .pre_handler = unlock_new_inode_pre_handler,
    .post_handler = unlock_new_inode_post_handler,
};

static struct kprobe unlock_two_nondirectories_kp = {
    .symbol_name = "unlock_two_nondirectories",
    .pre_handler = unlock_two_nondirectories_pre_handler,
    .post_handler = unlock_two_nondirectories_post_handler,
};

static struct kprobe unregister_filesystem_kp = {
    .symbol_name = "unregister_filesystem",
    .pre_handler = unregister_filesystem_pre_handler,
    .post_handler = unregister_filesystem_post_handler,
};

static struct kprobe vfs_fsync_range_kp = {
    .symbol_name = "vfs_fsync_range",
    .pre_handler = vfs_fsync_range_pre_handler,
    .post_handler = vfs_fsync_range_post_handler,
};

static struct kprobe vfs_setpos_kp = {
    .symbol_name = "vfs_setpos",
    .pre_handler = vfs_setpos_pre_handler,
    .post_handler = vfs_setpos_post_handler,
};


static struct kprobe *kps[70] = {
    	[I_BDEV_PROBE] = &I_BDEV_kp,
	[__BDEV_DAX_SUPPORTED_PROBE] = &__bdev_dax_supported_kp,
	[__BFORGET_PROBE] = &__bforget_kp,
	[__BIO_ADD_PAGE_PROBE] = &__bio_add_page_kp,
	[__BLKDEV_ISSUE_DISCARD_PROBE] = &__blkdev_issue_discard_kp,
	[__BLKDEV_ISSUE_ZEROOUT_PROBE] = &__blkdev_issue_zeroout_kp,
	[__BLOCK_WRITE_BEGIN_PROBE] = &__block_write_begin_kp,
	[__BLOCKDEV_DIRECT_IO_PROBE] = &__blockdev_direct_IO_kp,
	[__BREAD_GFP_PROBE] = &__bread_gfp_kp,
	[__BREADAHEAD_GFP_PROBE] = &__breadahead_gfp_kp,
	[__BRELSE_PROBE] = &__brelse_kp,
	[__CLEANCACHE_GET_PAGE_PROBE] = &__cleancache_get_page_kp,
	[__CLEANCACHE_INIT_FS_PROBE] = &__cleancache_init_fs_kp,
	[__FDGET_PROBE] = &__fdget_kp,
	[__FILEMAP_SET_WB_ERR_PROBE] = &__filemap_set_wb_err_kp,
	[__FIND_GET_BLOCK_PROBE] = &__find_get_block_kp,
	[__GENERIC_FILE_FSYNC_PROBE] = &__generic_file_fsync_kp,
	[__GENERIC_FILE_WRITE_ITER_PROBE] = &__generic_file_write_iter_kp,
	[__GETBLK_GFP_PROBE] = &__getblk_gfp_kp,
	[__INIT_WAITQUEUE_HEAD_PROBE] = &__init_waitqueue_head_kp,
	[__LOCK_BUFFER_PROBE] = &__lock_buffer_kp,
	[__MARK_INODE_DIRTY_PROBE] = &__mark_inode_dirty_kp,
	[__MB_CACHE_ENTRY_FREE_PROBE] = &__mb_cache_entry_free_kp,
	[__PAGE_SYMLINK_PROBE] = &__page_symlink_kp,
	[__PAGEVEC_RELEASE_PROBE] = &__pagevec_release_kp,
	[__PERCPU_DOWN_READ_PROBE] = &__percpu_down_read_kp,
	[__PERCPU_INIT_RWSEM_PROBE] = &__percpu_init_rwsem_kp,
	[__PUT_PAGE_PROBE] = &__put_page_kp,
	[__REFRIGERATOR_PROBE] = &__refrigerator_kp,
	[__SET_PAGE_DIRTY_BUFFERS_PROBE] = &__set_page_dirty_buffers_kp,
	[__SET_PAGE_DIRTY_NOBUFFERS_PROBE] = &__set_page_dirty_nobuffers_kp,
	[__SYNC_DIRTY_BUFFER_PROBE] = &__sync_dirty_buffer_kp,
	[__TEST_SET_PAGE_WRITEBACK_PROBE] = &__test_set_page_writeback_kp,
	[__VAR_WAITQUEUE_PROBE] = &__var_waitqueue_kp,
	[__WAIT_ON_BUFFER_PROBE] = &__wait_on_buffer_kp,
	[__WAKE_UP_PROBE] = &__wake_up_kp,
	[__WARN_PRINTK_PROBE] = &__warn_printk_kp,
	[ADD_TO_PAGE_CACHE_LRU_PROBE] = &add_to_page_cache_lru_kp,
	[BDEV_READ_ONLY_PROBE] = &bdev_read_only_kp,
	[BDEVNAME_PROBE] = &bdevname_kp,
	[BH_SUBMIT_READ_PROBE] = &bh_submit_read_kp,
	[BH_UPTODATE_OR_LOCK_PROBE] = &bh_uptodate_or_lock_kp,
	[BIO_ALLOC_BIOSET_PROBE] = &bio_alloc_bioset_kp,
	[BIO_DEVNAME_PROBE] = &bio_devname_kp,
	[BIO_PUT_PROBE] = &bio_put_kp,
	[BLK_FINISH_PLUG_PROBE] = &blk_finish_plug_kp,
	[BLK_START_PLUG_PROBE] = &blk_start_plug_kp,
	[BLK_STATUS_TO_ERRNO_PROBE] = &blk_status_to_errno_kp,
	[BLKDEV_GET_BY_DEV_PROBE] = &blkdev_get_by_dev_kp,
	[BLKDEV_ISSUE_DISCARD_PROBE] = &blkdev_issue_discard_kp,
	[BLKDEV_ISSUE_FLUSH_PROBE] = &blkdev_issue_flush_kp,
	[BLKDEV_PUT_PROBE] = &blkdev_put_kp,
	[BLOCK_COMMIT_WRITE_PROBE] = &block_commit_write_kp,
	[BLOCK_INVALIDATEPAGE_PROBE] = &block_invalidatepage_kp,
	[BLOCK_PAGE_MKWRITE_PROBE] = &block_page_mkwrite_kp,
	[BLOCK_READ_FULL_PAGE_PROBE] = &block_read_full_page_kp,
	[BLOCK_WRITE_END_PROBE] = &block_write_end_kp,
	[CAPABLE_PROBE] = &capable_kp,
	[CLEAN_BDEV_ALIASES_PROBE] = &clean_bdev_aliases_kp,
	[CLEAR_INODE_PROBE] = &clear_inode_kp,
	[CLEAR_NLINK_PROBE] = &clear_nlink_kp,
	[CLEAR_PAGE_DIRTY_FOR_IO_PROBE] = &clear_page_dirty_for_io_kp,
	[CREATE_EMPTY_BUFFERS_PROBE] = &create_empty_buffers_kp,
	[CRYPTO_ALLOC_SHASH_PROBE] = &crypto_alloc_shash_kp,
	[CRYPTO_DESTROY_TFM_PROBE] = &crypto_destroy_tfm_kp,
	[CRYPTO_SHASH_UPDATE_PROBE] = &crypto_shash_update_kp,
	[CURRENT_TIME_PROBE] = &current_time_kp,
	[D_FIND_ANY_ALIAS_PROBE] = &d_find_any_alias_kp,
	[D_INSTANTIATE_PROBE] = &d_instantiate_kp,
	[D_INSTANTIATE_NEW_PROBE] = &d_instantiate_new_kp,
	[D_MAKE_ROOT_PROBE] = &d_make_root_kp,
	[D_OBTAIN_ALIAS_PROBE] = &d_obtain_alias_kp,
	[D_PATH_PROBE] = &d_path_kp,
	[D_SPLICE_ALIAS_PROBE] = &d_splice_alias_kp,
	[D_TMPFILE_PROBE] = &d_tmpfile_kp,
	[DAX_FINISH_SYNC_FAULT_PROBE] = &dax_finish_sync_fault_kp,
	[DAX_IOMAP_FAULT_PROBE] = &dax_iomap_fault_kp,
	[DAX_IOMAP_RW_PROBE] = &dax_iomap_rw_kp,
	[DAX_LAYOUT_BUSY_PAGE_PROBE] = &dax_layout_busy_page_kp,
	[DAX_WRITEBACK_MAPPING_RANGE_PROBE] = &dax_writeback_mapping_range_kp,
	[DEL_TIMER_SYNC_PROBE] = &del_timer_sync_kp,
	[DESTROY_WORKQUEUE_PROBE] = &destroy_workqueue_kp,
	[DGET_PARENT_PROBE] = &dget_parent_kp,
	[DPUT_PROBE] = &dput_kp,
	[DROP_NLINK_PROBE] = &drop_nlink_kp,
	[DUMP_PAGE_PROBE] = &dump_page_kp,
	[END_PAGE_WRITEBACK_PROBE] = &end_page_writeback_kp,
	[FIEMAP_FILL_NEXT_EXTENT_PROBE] = &fiemap_fill_next_extent_kp,
	[FILE_CHECK_AND_ADVANCE_WB_ERR_PROBE] = &file_check_and_advance_wb_err_kp,
	[FILE_PATH_PROBE] = &file_path_kp,
	[FILE_REMOVE_PRIVS_PROBE] = &file_remove_privs_kp,
	[FILE_UPDATE_TIME_PROBE] = &file_update_time_kp,
	[FILE_WRITE_AND_WAIT_RANGE_PROBE] = &file_write_and_wait_range_kp,
	[FILEMAP_FAULT_PROBE] = &filemap_fault_kp,
	[FILEMAP_FLUSH_PROBE] = &filemap_flush_kp,
	[FILEMAP_WRITE_AND_WAIT_RANGE_PROBE] = &filemap_write_and_wait_range_kp,
	[FIND_INODE_NOWAIT_PROBE] = &find_inode_nowait_kp,
	[FLUSH_WORKQUEUE_PROBE] = &flush_workqueue_kp,
	[FPUT_PROBE] = &fput_kp,
	[FREEZE_BDEV_PROBE] = &freeze_bdev_kp,
	[FREEZING_SLOW_PATH_PROBE] = &freezing_slow_path_kp,
	[FROM_KGID_PROBE] = &from_kgid_kp,
	[FROM_KGID_MUNGED_PROBE] = &from_kgid_munged_kp,
	[FROM_KPROJID_PROBE] = &from_kprojid_kp,
	[FS_DAX_GET_BY_BDEV_PROBE] = &fs_dax_get_by_bdev_kp,
	[GENERIC_BLOCK_BMAP_PROBE] = &generic_block_bmap_kp,
	[GENERIC_BLOCK_FIEMAP_PROBE] = &generic_block_fiemap_kp,
	[GENERIC_CHECK_ADDRESSABLE_PROBE] = &generic_check_addressable_kp,
	[GENERIC_FH_TO_DENTRY_PROBE] = &generic_fh_to_dentry_kp,
	[GENERIC_FH_TO_PARENT_PROBE] = &generic_fh_to_parent_kp,
	[GENERIC_FILE_LLSEEK_SIZE_PROBE] = &generic_file_llseek_size_kp,
	[GENERIC_FILE_READ_ITER_PROBE] = &generic_file_read_iter_kp,
	[GENERIC_FILLATTR_PROBE] = &generic_fillattr_kp,
	[GENERIC_WRITE_END_PROBE] = &generic_write_end_kp,
	[GENERIC_WRITEPAGES_PROBE] = &generic_writepages_kp,
	[GET_ACL_PROBE] = &get_acl_kp,
	[GRAB_CACHE_PAGE_WRITE_BEGIN_PROBE] = &grab_cache_page_write_begin_kp,
	[IGET_FAILED_PROBE] = &iget_failed_kp,
	[IGET_LOCKED_PROBE] = &iget_locked_kp,
	[IGRAB_PROBE] = &igrab_kp,
	[IHOLD_PROBE] = &ihold_kp,
	[IN_GROUP_P_PROBE] = &in_group_p_kp,
	[INC_NLINK_PROBE] = &inc_nlink_kp,
	[INIT_SPECIAL_INODE_PROBE] = &init_special_inode_kp,
	[INIT_TIMER_KEY_PROBE] = &init_timer_key_kp,
	[INIT_WAIT_ENTRY_PROBE] = &init_wait_entry_kp,
	[INIT_WAIT_VAR_ENTRY_PROBE] = &init_wait_var_entry_kp,
	[INODE_DIO_WAIT_PROBE] = &inode_dio_wait_kp,
	[INODE_INIT_ONCE_PROBE] = &inode_init_once_kp,
	[INODE_INIT_OWNER_PROBE] = &inode_init_owner_kp,
	[INODE_NEEDS_SYNC_PROBE] = &inode_needs_sync_kp,
	[INODE_NEWSIZE_OK_PROBE] = &inode_newsize_ok_kp,
	[INODE_NOHIGHMEM_PROBE] = &inode_nohighmem_kp,
	[INODE_OWNER_OR_CAPABLE_PROBE] = &inode_owner_or_capable_kp,
	[INODE_SET_FLAGS_PROBE] = &inode_set_flags_kp,
	[INSERT_INODE_LOCKED_PROBE] = &insert_inode_locked_kp,
	[INVALIDATE_BDEV_PROBE] = &invalidate_bdev_kp,
	[INVALIDATE_INODE_BUFFERS_PROBE] = &invalidate_inode_buffers_kp,
	[IOMAP_SEEK_DATA_PROBE] = &iomap_seek_data_kp,
	[IOMAP_SEEK_HOLE_PROBE] = &iomap_seek_hole_kp,
	[IOMAP_ZERO_RANGE_PROBE] = &iomap_zero_range_kp,
	[IPUT_PROBE] = &iput_kp,
	[IS_BAD_INODE_PROBE] = &is_bad_inode_kp,
	[KERN_PATH_PROBE] = &kern_path_kp,
	[KSTRDUP_PROBE] = &kstrdup_kp,
	[KSTRNDUP_PROBE] = &kstrndup_kp,
	[KTHREAD_CREATE_ON_NODE_PROBE] = &kthread_create_on_node_kp,
	[KTHREAD_SHOULD_STOP_PROBE] = &kthread_should_stop_kp,
	[KTHREAD_STOP_PROBE] = &kthread_stop_kp,
	[KTIME_GET_PROBE] = &ktime_get_kp,
	[KTIME_GET_REAL_SECONDS_PROBE] = &ktime_get_real_seconds_kp,
	[KTIME_GET_WITH_OFFSET_PROBE] = &ktime_get_with_offset_kp,
	[LL_RW_BLOCK_PROBE] = &ll_rw_block_kp,
	[LOCK_TWO_NONDIRECTORIES_PROBE] = &lock_two_nondirectories_kp,
	[MAKE_BAD_INODE_PROBE] = &make_bad_inode_kp,
	[MAKE_KGID_PROBE] = &make_kgid_kp,
	[MAKE_KPROJID_PROBE] = &make_kprojid_kp,
	[MAKE_KUID_PROBE] = &make_kuid_kp,
	[MARK_BUFFER_DIRTY_PROBE] = &mark_buffer_dirty_kp,
	[MARK_BUFFER_DIRTY_INODE_PROBE] = &mark_buffer_dirty_inode_kp,
	[MB_CACHE_CREATE_PROBE] = &mb_cache_create_kp,
	[MB_CACHE_DESTROY_PROBE] = &mb_cache_destroy_kp,
	[MB_CACHE_ENTRY_CREATE_PROBE] = &mb_cache_entry_create_kp,
	[MB_CACHE_ENTRY_DELETE_PROBE] = &mb_cache_entry_delete_kp,
	[MB_CACHE_ENTRY_FIND_FIRST_PROBE] = &mb_cache_entry_find_first_kp,
	[MB_CACHE_ENTRY_FIND_NEXT_PROBE] = &mb_cache_entry_find_next_kp,
	[MB_CACHE_ENTRY_GET_PROBE] = &mb_cache_entry_get_kp,
	[MB_CACHE_ENTRY_TOUCH_PROBE] = &mb_cache_entry_touch_kp,
	[MNT_DROP_WRITE_FILE_PROBE] = &mnt_drop_write_file_kp,
	[MNT_WANT_WRITE_FILE_PROBE] = &mnt_want_write_file_kp,
	[MOD_TIMER_PROBE] = &mod_timer_kp,
	[MOUNT_BDEV_PROBE] = &mount_bdev_kp,
	[NEW_INODE_PROBE] = &new_inode_kp,
	[PAGE_MAPPED_PROBE] = &page_mapped_kp,
	[PAGE_ZERO_NEW_BUFFERS_PROBE] = &page_zero_new_buffers_kp,
	[PAGECACHE_GET_PAGE_PROBE] = &pagecache_get_page_kp,
	[PAGECACHE_ISIZE_EXTENDED_PROBE] = &pagecache_isize_extended_kp,
	[PAGEVEC_LOOKUP_RANGE_PROBE] = &pagevec_lookup_range_kp,
	[PARSE_OPTIONS_PROBE] = &parse_options_kp,
	[PATH_PUT_PROBE] = &path_put_kp,
	[PERCPU_DOWN_WRITE_PROBE] = &percpu_down_write_kp,
	[PERCPU_FREE_RWSEM_PROBE] = &percpu_free_rwsem_kp,
	[PERCPU_UP_WRITE_PROBE] = &percpu_up_write_kp,
	[POSIX_ACL_ALLOC_PROBE] = &posix_acl_alloc_kp,
	[POSIX_ACL_CHMOD_PROBE] = &posix_acl_chmod_kp,
	[POSIX_ACL_CREATE_PROBE] = &posix_acl_create_kp,
	[POSIX_ACL_UPDATE_MODE_PROBE] = &posix_acl_update_mode_kp,
	[PREPARE_TO_WAIT_EVENT_PROBE] = &prepare_to_wait_event_kp,
	[PRINTK_PROBE] = &printk_kp,
	[PUT_DAX_PROBE] = &put_dax_kp,
	[QUEUE_WORK_ON_PROBE] = &queue_work_on_kp,
	[READ_CACHE_PAGES_PROBE] = &read_cache_pages_kp,
	[REDIRTY_PAGE_FOR_WRITEPAGE_PROBE] = &redirty_page_for_writepage_kp,
	[REGISTER_FILESYSTEM_PROBE] = &register_filesystem_kp,
	[REGISTER_SHRINKER_PROBE] = &register_shrinker_kp,
	[SB_MIN_BLOCKSIZE_PROBE] = &sb_min_blocksize_kp,
	[SB_SET_BLOCKSIZE_PROBE] = &sb_set_blocksize_kp,
	[SEQ_ESCAPE_PROBE] = &seq_escape_kp,
	[SEQ_PRINTF_PROBE] = &seq_printf_kp,
	[SEQ_PUTC_PROBE] = &seq_putc_kp,
	[SEQ_PUTS_PROBE] = &seq_puts_kp,
	[SET_BLOCKSIZE_PROBE] = &set_blocksize_kp,
	[SET_CACHED_ACL_PROBE] = &set_cached_acl_kp,
	[SET_NLINK_PROBE] = &set_nlink_kp,
	[SET_TASK_IOPRIO_PROBE] = &set_task_ioprio_kp,
	[SETATTR_COPY_PROBE] = &setattr_copy_kp,
	[SETATTR_PREPARE_PROBE] = &setattr_prepare_kp,
	[SUBMIT_BH_PROBE] = &submit_bh_kp,
	[SUBMIT_BIO_PROBE] = &submit_bio_kp,
	[SUBMIT_BIO_WAIT_PROBE] = &submit_bio_wait_kp,
	[SYNC_BLOCKDEV_PROBE] = &sync_blockdev_kp,
	[SYNC_DIRTY_BUFFER_PROBE] = &sync_dirty_buffer_kp,
	[SYNC_FILESYSTEM_PROBE] = &sync_filesystem_kp,
	[SYNC_INODE_METADATA_PROBE] = &sync_inode_metadata_kp,
	[SYNC_MAPPING_BUFFERS_PROBE] = &sync_mapping_buffers_kp,
	[TAG_PAGES_FOR_WRITEBACK_PROBE] = &tag_pages_for_writeback_kp,
	[THAW_BDEV_PROBE] = &thaw_bdev_kp,
	[TOUCH_ATIME_PROBE] = &touch_atime_kp,
	[TRUNCATE_INODE_PAGES_PROBE] = &truncate_inode_pages_kp,
	[TRUNCATE_INODE_PAGES_FINAL_PROBE] = &truncate_inode_pages_final_kp,
	[TRUNCATE_PAGECACHE_PROBE] = &truncate_pagecache_kp,
	[TRUNCATE_PAGECACHE_RANGE_PROBE] = &truncate_pagecache_range_kp,
	[TRY_TO_FREE_BUFFERS_PROBE] = &try_to_free_buffers_kp,
	[TRY_TO_WRITEBACK_INODES_SB_PROBE] = &try_to_writeback_inodes_sb_kp,
	[UNLOCK_BUFFER_PROBE] = &unlock_buffer_kp,
	[UNLOCK_NEW_INODE_PROBE] = &unlock_new_inode_kp,
	[UNLOCK_TWO_NONDIRECTORIES_PROBE] = &unlock_two_nondirectories_kp,
	[UNREGISTER_FILESYSTEM_PROBE] = &unregister_filesystem_kp,
	[VFS_FSYNC_RANGE_PROBE] = &vfs_fsync_range_kp,
	[VFS_SETPOS_PROBE] = &vfs_setpos_kp,

};


int I_BDEV_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int I_BDEV_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __bdev_dax_supported_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __bdev_dax_supported_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __bforget_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __bforget_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __bio_add_page_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __bio_add_page_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __blkdev_issue_discard_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __blkdev_issue_discard_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __blkdev_issue_zeroout_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __blkdev_issue_zeroout_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __block_write_begin_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __block_write_begin_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __blockdev_direct_IO_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __blockdev_direct_IO_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __bread_gfp_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __bread_gfp_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __breadahead_gfp_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __breadahead_gfp_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __brelse_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __brelse_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __cleancache_get_page_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __cleancache_get_page_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __cleancache_init_fs_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __cleancache_init_fs_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __fdget_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __fdget_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __filemap_set_wb_err_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __filemap_set_wb_err_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __find_get_block_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __find_get_block_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __generic_file_fsync_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __generic_file_fsync_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __generic_file_write_iter_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __generic_file_write_iter_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __getblk_gfp_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __getblk_gfp_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __init_waitqueue_head_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __init_waitqueue_head_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __lock_buffer_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __lock_buffer_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __mark_inode_dirty_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __mark_inode_dirty_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __mb_cache_entry_free_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __mb_cache_entry_free_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __page_symlink_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __page_symlink_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __pagevec_release_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __pagevec_release_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __percpu_down_read_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __percpu_down_read_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __percpu_init_rwsem_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __percpu_init_rwsem_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __put_page_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __put_page_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __refrigerator_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __refrigerator_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __set_page_dirty_buffers_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __set_page_dirty_buffers_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __set_page_dirty_nobuffers_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __set_page_dirty_nobuffers_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __sync_dirty_buffer_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __sync_dirty_buffer_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __test_set_page_writeback_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __test_set_page_writeback_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __var_waitqueue_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __var_waitqueue_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __wait_on_buffer_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __wait_on_buffer_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __wake_up_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __wake_up_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int __warn_printk_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int __warn_printk_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int add_to_page_cache_lru_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int add_to_page_cache_lru_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int bdev_read_only_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int bdev_read_only_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int bdevname_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int bdevname_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int bh_submit_read_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int bh_submit_read_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int bh_uptodate_or_lock_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int bh_uptodate_or_lock_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int bio_alloc_bioset_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int bio_alloc_bioset_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int bio_devname_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int bio_devname_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int bio_put_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int bio_put_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int blk_finish_plug_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int blk_finish_plug_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int blk_start_plug_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int blk_start_plug_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int blk_status_to_errno_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int blk_status_to_errno_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int blkdev_get_by_dev_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int blkdev_get_by_dev_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int blkdev_issue_discard_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int blkdev_issue_discard_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int blkdev_issue_flush_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int blkdev_issue_flush_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int blkdev_put_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int blkdev_put_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int block_commit_write_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int block_commit_write_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int block_invalidatepage_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int block_invalidatepage_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int block_page_mkwrite_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int block_page_mkwrite_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int block_read_full_page_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int block_read_full_page_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int block_write_end_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int block_write_end_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int capable_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int capable_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int clean_bdev_aliases_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int clean_bdev_aliases_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int clear_inode_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int clear_inode_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int clear_nlink_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int clear_nlink_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int clear_page_dirty_for_io_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int clear_page_dirty_for_io_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int create_empty_buffers_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int create_empty_buffers_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int crypto_alloc_shash_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int crypto_alloc_shash_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int crypto_destroy_tfm_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int crypto_destroy_tfm_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int crypto_shash_update_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int crypto_shash_update_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int current_time_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int current_time_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int d_find_any_alias_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int d_find_any_alias_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int d_instantiate_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int d_instantiate_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int d_instantiate_new_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int d_instantiate_new_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int d_make_root_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int d_make_root_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int d_obtain_alias_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int d_obtain_alias_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int d_path_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int d_path_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int d_splice_alias_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int d_splice_alias_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int d_tmpfile_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int d_tmpfile_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int dax_finish_sync_fault_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int dax_finish_sync_fault_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int dax_iomap_fault_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int dax_iomap_fault_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int dax_iomap_rw_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int dax_iomap_rw_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int dax_layout_busy_page_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int dax_layout_busy_page_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int dax_writeback_mapping_range_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int dax_writeback_mapping_range_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int del_timer_sync_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int del_timer_sync_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int destroy_workqueue_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int destroy_workqueue_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int dget_parent_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int dget_parent_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int dput_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int dput_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int drop_nlink_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int drop_nlink_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int dump_page_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int dump_page_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int end_page_writeback_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int end_page_writeback_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int fiemap_fill_next_extent_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int fiemap_fill_next_extent_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int file_check_and_advance_wb_err_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int file_check_and_advance_wb_err_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int file_path_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int file_path_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int file_remove_privs_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int file_remove_privs_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int file_update_time_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int file_update_time_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int file_write_and_wait_range_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int file_write_and_wait_range_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int filemap_fault_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int filemap_fault_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int filemap_flush_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int filemap_flush_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int filemap_write_and_wait_range_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int filemap_write_and_wait_range_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int find_inode_nowait_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int find_inode_nowait_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int flush_workqueue_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int flush_workqueue_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int fput_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int fput_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int freeze_bdev_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int freeze_bdev_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int freezing_slow_path_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int freezing_slow_path_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int from_kgid_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int from_kgid_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int from_kgid_munged_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int from_kgid_munged_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int from_kprojid_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int from_kprojid_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int fs_dax_get_by_bdev_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int fs_dax_get_by_bdev_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int generic_block_bmap_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int generic_block_bmap_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int generic_block_fiemap_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int generic_block_fiemap_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int generic_check_addressable_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int generic_check_addressable_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int generic_fh_to_dentry_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int generic_fh_to_dentry_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int generic_fh_to_parent_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int generic_fh_to_parent_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int generic_file_llseek_size_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int generic_file_llseek_size_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int generic_file_read_iter_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int generic_file_read_iter_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int generic_fillattr_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int generic_fillattr_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int generic_write_end_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int generic_write_end_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int generic_writepages_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int generic_writepages_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int get_acl_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int get_acl_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int grab_cache_page_write_begin_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int grab_cache_page_write_begin_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int iget_failed_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int iget_failed_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int iget_locked_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int iget_locked_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int igrab_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int igrab_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int ihold_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int ihold_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int in_group_p_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int in_group_p_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int inc_nlink_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int inc_nlink_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int init_special_inode_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int init_special_inode_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int init_timer_key_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int init_timer_key_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int init_wait_entry_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int init_wait_entry_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int init_wait_var_entry_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int init_wait_var_entry_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int inode_dio_wait_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int inode_dio_wait_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int inode_init_once_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int inode_init_once_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int inode_init_owner_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int inode_init_owner_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int inode_needs_sync_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int inode_needs_sync_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int inode_newsize_ok_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int inode_newsize_ok_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int inode_nohighmem_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int inode_nohighmem_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int inode_owner_or_capable_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int inode_owner_or_capable_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int inode_set_flags_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int inode_set_flags_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int insert_inode_locked_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int insert_inode_locked_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int invalidate_bdev_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int invalidate_bdev_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int invalidate_inode_buffers_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int invalidate_inode_buffers_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int iomap_seek_data_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int iomap_seek_data_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int iomap_seek_hole_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int iomap_seek_hole_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int iomap_zero_range_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int iomap_zero_range_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int iput_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int iput_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int is_bad_inode_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int is_bad_inode_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int kern_path_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int kern_path_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int kstrdup_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int kstrdup_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int kstrndup_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int kstrndup_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int kthread_create_on_node_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int kthread_create_on_node_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int kthread_should_stop_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int kthread_should_stop_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int kthread_stop_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int kthread_stop_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int ktime_get_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int ktime_get_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int ktime_get_real_seconds_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int ktime_get_real_seconds_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int ktime_get_with_offset_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int ktime_get_with_offset_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int ll_rw_block_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int ll_rw_block_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int lock_two_nondirectories_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int lock_two_nondirectories_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int make_bad_inode_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int make_bad_inode_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int make_kgid_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int make_kgid_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int make_kprojid_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int make_kprojid_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int make_kuid_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int make_kuid_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int mark_buffer_dirty_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int mark_buffer_dirty_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int mark_buffer_dirty_inode_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int mark_buffer_dirty_inode_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int mb_cache_create_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int mb_cache_create_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int mb_cache_destroy_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int mb_cache_destroy_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int mb_cache_entry_create_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int mb_cache_entry_create_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int mb_cache_entry_delete_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int mb_cache_entry_delete_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int mb_cache_entry_find_first_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int mb_cache_entry_find_first_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int mb_cache_entry_find_next_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int mb_cache_entry_find_next_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int mb_cache_entry_get_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int mb_cache_entry_get_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int mb_cache_entry_touch_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int mb_cache_entry_touch_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int mnt_drop_write_file_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int mnt_drop_write_file_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int mnt_want_write_file_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int mnt_want_write_file_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int mod_timer_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int mod_timer_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int mount_bdev_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int mount_bdev_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int new_inode_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int new_inode_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int page_mapped_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int page_mapped_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int page_zero_new_buffers_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int page_zero_new_buffers_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int pagecache_get_page_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int pagecache_get_page_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int pagecache_isize_extended_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int pagecache_isize_extended_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int pagevec_lookup_range_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int pagevec_lookup_range_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int parse_options_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int parse_options_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int path_put_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int path_put_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int percpu_down_write_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int percpu_down_write_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int percpu_free_rwsem_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int percpu_free_rwsem_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int percpu_up_write_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int percpu_up_write_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int posix_acl_alloc_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int posix_acl_alloc_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int posix_acl_chmod_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int posix_acl_chmod_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int posix_acl_create_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int posix_acl_create_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int posix_acl_update_mode_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int posix_acl_update_mode_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int prepare_to_wait_event_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int prepare_to_wait_event_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int printk_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int printk_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int put_dax_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int put_dax_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int queue_work_on_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int queue_work_on_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int read_cache_pages_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int read_cache_pages_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int redirty_page_for_writepage_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int redirty_page_for_writepage_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int register_filesystem_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int register_filesystem_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int register_shrinker_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int register_shrinker_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int sb_min_blocksize_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int sb_min_blocksize_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int sb_set_blocksize_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int sb_set_blocksize_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int seq_escape_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int seq_escape_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int seq_printf_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int seq_printf_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int seq_putc_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int seq_putc_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int seq_puts_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int seq_puts_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int set_blocksize_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int set_blocksize_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int set_cached_acl_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int set_cached_acl_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int set_nlink_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int set_nlink_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int set_task_ioprio_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int set_task_ioprio_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int setattr_copy_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int setattr_copy_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int setattr_prepare_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int setattr_prepare_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int submit_bh_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int submit_bh_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int submit_bio_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int submit_bio_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int submit_bio_wait_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int submit_bio_wait_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int sync_blockdev_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int sync_blockdev_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int sync_dirty_buffer_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int sync_dirty_buffer_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int sync_filesystem_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int sync_filesystem_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int sync_inode_metadata_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int sync_inode_metadata_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int sync_mapping_buffers_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int sync_mapping_buffers_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int tag_pages_for_writeback_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int tag_pages_for_writeback_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int thaw_bdev_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int thaw_bdev_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int touch_atime_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int touch_atime_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int truncate_inode_pages_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int truncate_inode_pages_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int truncate_inode_pages_final_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int truncate_inode_pages_final_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int truncate_pagecache_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int truncate_pagecache_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int truncate_pagecache_range_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int truncate_pagecache_range_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int try_to_free_buffers_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int try_to_free_buffers_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int try_to_writeback_inodes_sb_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int try_to_writeback_inodes_sb_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int unlock_buffer_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int unlock_buffer_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int unlock_new_inode_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int unlock_new_inode_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int unlock_two_nondirectories_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int unlock_two_nondirectories_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int unregister_filesystem_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int unregister_filesystem_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int vfs_fsync_range_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int vfs_fsync_range_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

int vfs_setpos_pre_handler(struct kprobe *p, struct pt_regs *regs) 
{
    if (this_cpu_read(ext4_executing)) {

    }
    return 0;
}
int vfs_setpos_post_handler(struct kprobe *p, struct pt_regs *regs) 
{
    
    return 0;
}

